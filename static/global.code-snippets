{
    // Place your snippets for ignore here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,javascriptreact,typescript,typescriptreact",
    //  "prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Print to console": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "l",
        "body": [
            "console.log($0)"
        ],
        "description": "Log output to console",
    },
    "for i": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "fori",
        "body": [
            "for (let i = 0; i < $0; i++) {",
            "    ",
            "}"
        ],
        "description": "fori",
    },
    "forof": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "forof",
        "body": [
            "for (const $1 of $0) {",
            "    ",
            "}"
        ],
        "description": "foriof",
    },
    "for i of": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "foriof",
        "body": [
            "for (const i of $0) {",
            "    ",
            "}"
        ],
        "description": "foriof",
    },
    "for j of": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "forjof",
        "body": [
            "for (const j of $0) {",
            "    ",
            "}"
        ],
        "description": "forjof",
    },
    "for array": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "fora",
        "body": [
            "for (let i = 0; i < $0.length; i++) {",
            "    ",
            "}"
        ],
        "description": "fora",
    },
    "for j": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "forj",
        "body": [
            "for (let j = 0; j < $0; j++) {",
            "    ",
            "}"
        ],
        "description": "forj",
    },
    "MutationObserver": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "mo",
        "body": [
            "const targetNode = document.getElementsByClassName(\"$0\")[0]",
            "const config = { attributes: true, childList: true, subtree: true }",
            "const callback = function (mutationsList, observer) {",
            "    for (const i of mutationsList) {",
            "        ",
            "    }",
            "}",
            "const observer = new MutationObserver(callback)",
            "observer.observe(targetNode, config)",
        ],
        "description": "MutationObserver",
    },
    "did": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "did",
        "body": [
            "document.getElementById(\"$0\")"
        ],
        "description": "did",
    },
    "dcs": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "dcs",
        "body": [
            "document.getElementsByClassName(\"$0\")"
        ],
        "description": "dcs",
    },
    "dcd": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "dcd",
        "body": [
            "document.createElement(\"div\")",
            "$0"
        ],
        "description": "dcd",
    },
    "iexp": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "iexp",
        "body": [
            "import express from \"express\"",
            "$0"
        ],
        "description": "NodeJs Expresss Module",
    },
    "require": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "req",
        "body": [
            "require(\"$0\")"
        ],
        "description": "require(something)",
    },
    "ed": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "ed",
        "body": [
            "export default $0"
        ],
        "description": "export default",
    },
    "dce": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "dce",
        "body": [
            "document.createElement(\"$0\")"
        ],
        "description": "document.createElement",
    },
    "dqs": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "dqs",
        "body": [
            "document.querySelector(\"$0\")"
        ],
        "description": "document.querySelector",
    },
    "zs": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "zs",
        "body": [
            "/** $0 */"
        ],
        "description": "TypeScript 注释",
    },
    "expreq": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "expreq",
        "body": [
            "async (request, response) => {",
            "    $0",
            "}"
        ],
    },
    "export component": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "edc",
        "body": [
            "import { clsx } from \"deepsea-tools\"",
            "import { ComponentPropsWithoutRef, ComponentRef, forwardRef } from \"react\"",
            "",
            "export type ${TM_FILENAME_BASE}Props = Omit<ComponentPropsWithoutRef<\"$1\">, \"children\"> & {",
            "",
            "}",
            "",
            "export const ${TM_FILENAME_BASE} = forwardRef<ComponentRef<\"$1\">, ${TM_FILENAME_BASE}Props>((props, ref) => {",
            "    const { className, ...rest } = props",
            "",
            "    return (",
            "        <$1 ref={ref} className={clsx(\"$2\", className)} {...rest}>",
            "            $0",
            "        </$1>",
            "    )",
            "})",
            "",
        ],
    },
    "export default component": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "edc",
        "body": [
            "import { clsx } from \"deepsea-tools\"",
            "import { ComponentPropsWithoutRef, ComponentRef, forwardRef } from \"react\"",
            "",
            "export type ${TM_FILENAME_BASE}Props = Omit<ComponentPropsWithoutRef<\"$1\">, \"children\"> & {",
            "",
            "}",
            "",
            "const ${TM_FILENAME_BASE} = forwardRef<ComponentRef<\"$1\">, ${TM_FILENAME_BASE}Props>((props, ref) => {",
            "    const { className, ...rest } = props",
            "",
            "    return (",
            "        <$1 ref={ref} className={clsx(\"$2\", className)} {...rest}>",
            "            $0",
            "        </$1>",
            "    )",
            "})",
            "",
            "export default ${TM_FILENAME_BASE}",
            "",
        ],
    },
    "export default View": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "edv",
        "body": [
            "import { ComponentProps, FC } from \"react\"",
            "import { View } from \"react-native\"",
            "",
            "export type ${TM_FILENAME_BASE}Props = Omit<ComponentProps<typeof View>, \"children\"> & {",
            "",
            "}",
            "",
            "const ${TM_FILENAME_BASE}: FC<${TM_FILENAME_BASE}Props> = props => {",
            "    const { style, ...rest } = props",
            "",
            "    return (",
            "        <View style={[{}, style]} {...rest}>",
            "            $0",
            "        </View>",
            "    )",
            "}",
            "",
            "export default ${TM_FILENAME_BASE}",
            "",
        ],
    },
    "export blank component": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "ebc",
        "body": [
            "import { FC } from \"react\"",
            "",
            "export const ${TM_FILENAME_BASE}: FC = () => {",
            "",
            "    return (",
            "        <$1>",
            "            $0",
            "        </$1>",
            "    )",
            "}",
            "",
        ],
    },
    "export default blank component": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "edbc",
        "body": [
            "import { FC } from \"react\"",
            "",
            "const ${TM_FILENAME_BASE/^(.)/${1:/upcase}/}: FC = () => {",
            "",
            "    return (",
            "        <$1>",
            "            $0",
            "        </$1>",
            "    )",
            "}",
            "",
            "export default ${TM_FILENAME_BASE/^(.)/${1:/upcase}/}",
            "",
        ],
    },
    "jsdoc": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "jsdoc",
        "body": [
            "/**",
            " * @author Lu Rong <lurongv@qq.com>",
            " * @create $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
            " * @description $1",
            " */",
            "",
            "$0",
        ],
    },
    "vue": {
        "scope": "vue",
        "prefix": "vue",
        "body": [
            "<script setup lang=\"ts\" >",
            "$0",
            "</script>",
            "",
            "<template>",
            "    ",
            "</template>",
            "",
            "<style scoped>",
            "    ",
            "</style>"
        ],
    },
    "export IonPage": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "ionpage",
        "body": [
            "import { IonBackButton, IonButtons, IonContent, IonHeader, IonPage, IonTitle, IonToolbar } from \"@ionic/react\"",
            "import { FC } from \"react\"",
            "",
            "export const ${TM_FILENAME_BASE}: FC = () => {",
            "    return (",
            "        <IonPage>",
            "            <IonHeader translucent>",
            "                <IonToolbar>",
            "                    <IonButtons slot=\"start\">",
            "                        <IonBackButton text=\"返回\" />",
            "                    </IonButtons>",
            "                    <IonTitle>$1</IonTitle>",
            "                </IonToolbar>",
            "            </IonHeader>",
            "            <IonContent fullscreen>",
            "                <div className=\"flex-y min-h-full\">",
            "                    $0",
            "                </div>",
            "            </IonContent>",
            "        </IonPage>",
            "    )",
            "}",
            "",
        ],
    },
    "next layout": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "layout",
        "body": [
            "import { FC, ReactNode } from \"react\"",
            "",
            "export type LayoutProps = {",
            "    children?: ReactNode",
            "}",
            "",
            "const Layout: FC<LayoutProps> = props => {",
            "    const { children } = props",
            "",
            "    return (",
            "        <div className=\"\">",
            "            {children}",
            "        </div>",
            "    )",
            "}",
            "",
            "export default Layout",
            "",
        ],
    },
    "next root layout": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "rootlayout",
        "body": [
            "import AntdNextRegistry from \"@/components/AntdNextRegistry\"",
            "import { Metadata } from \"next\"",
            "import { FC, ReactNode } from \"react\"",
            "import \"./globals.css\"",
            "",
            "export const metadata: Metadata = {",
            "    title: \"$1\",",
            "    description: \"$0\"",
            "}",
            "",
            "export type RootLayoutProps = {",
            "    children?: ReactNode",
            "}",
            "",
            "const RootLayout: FC<RootLayoutProps> = props => {",
            "    const { children } = props",
            "",
            "    return (",
            "        <html lang=\"zh\">",
            "            <body className={inter.className}>",
            "                <AntdNextRegistry>{children}</AntdNextRegistry>",
            "            </body>",
            "        </html>",
            "    )",
            "}",
            "",
            "export default RootLayout",
            "",
        ],
    },
    "next page": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "page",
        "body": [
            "import { FC } from \"react\"",
            "",
            "const Page: FC = () => {",
            "",
            "    return (",
            "        <div>",
            "            $0",
            "        </div>",
            "    )",
            "}",
            "",
            "export default Page",
            "",
        ],
    },
    "next page with props": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "propspage",
        "body": [
            "import { NextPageProps } from \"@/types\"",
            "import { FC } from \"react\"",
            "",
            "const Page: FC<NextPageProps> = props => {",
            "    const {",
            "        params: { $1 }",
            "    } = props",
            "",
            "    return (",
            "        <div>",
            "            $0",
            "        </div>",
            "    )",
            "}",
            "",
            "export default Page",
            "",
        ],
    },
    "antd registry with next": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "antd",
        "body": [
            "\"use client\"",
            "",
            "import { StyleProvider } from \"@ant-design/cssinjs\"",
            "import { AntdRegistry } from \"@ant-design/nextjs-registry\"",
            "import { ConfigProvider } from \"antd\"",
            "import zhCN from \"antd/locale/zh_CN\"",
            "import { FC, ReactNode } from \"react\"",
            "",
            "export type RegistryProps = {",
            "    children?: ReactNode",
            "}",
            "",
            "export const Registry: FC<RegistryProps> = props => {",
            "    const { children } = props",
            "",
            "    return (",
            "        <AntdRegistry>",
            "            <ConfigProvider locale={zhCN}>",
            "                <StyleProvider hashPriority=\"high\">{children}</StyleProvider>",
            "            </ConfigProvider>",
            "        </AntdRegistry>",
            "    )",
            "}",
            "",
        ],
    },
    "use client": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "uc",
        "body": [
            "\"use client\""
        ],
    },
    "use server": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "us",
        "body": [
            "\"use server\""
        ],
    },
    "next.js get function": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "get",
        "body": [
            "import { NextRequestConfig } from \"@/types\"",
            "import { NextRequest, NextResponse } from \"next/server\"",
            "",
            "export async function GET(request: NextRequest, config: NextRequestConfig) {",
            "    $0",
            "}",
        ],
    },
    "md": {
        "scope": "markdown",
        "prefix": "md",
        "body": [
            "---",
            "slug: ${TM_DIRECTORY/^(.+?)([^\\\\]+)$/$2/}",
            "title: $1",
            "authors: [1adybug]",
            "date: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}",
            "tags: []",
            "---",
            "",
            "$0",
        ],
    },
    "warning": {
        "scope": "markdown",
        "prefix": "warning",
        "body": [
            ":::warning",
            "",
            "$0",
            "",
            ":::"
        ],
    },
    "tip": {
        "scope": "markdown",
        "prefix": "tip",
        "body": [
            ":::tip",
            "",
            "$0",
            "",
            ":::"
        ],
    },
    "info": {
        "scope": "markdown",
        "prefix": "info",
        "body": [
            ":::info",
            "",
            "$0",
            "",
            ":::"
        ],
    },
    "success": {
        "scope": "markdown",
        "prefix": "success",
        "body": [
            ":::success",
            "",
            "$0",
            "",
            ":::"
        ],
    },
    "danger": {
        "scope": "markdown",
        "prefix": "danger",
        "body": [
            ":::danger",
            "",
            "$0",
            "",
            ":::"
        ],
    },
    "action": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "action",
        "body": [
            "\"use server\"",
            "",
            "import { ${TM_FILENAME_BASE/^([a-zA-Z])/${1:/upcase}/}Params } from \"@/schema/${TM_FILENAME_BASE/Action$//}\"",
            "",
            "import { ${TM_FILENAME_BASE/Action$//} } from \"@/server/${TM_FILENAME_BASE/Action$//}\"",
            "",
            "import { getDataResponse } from \"@/utils/getDataResponse\"",
            "",
            "export async function ${TM_FILENAME_BASE/Action$//}Action(params: ${TM_FILENAME_BASE/^([a-zA-Z])/${1:/upcase}/}Params) {",
            "    return await getDataResponse(${TM_FILENAME_BASE/Action$//}, params)",
            "}",
            "",
        ],
    },
    "main function": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "main",
        "body": [
            "async function main() {",
            "    $0",
            "}",
            "",
            "main()"
        ],
    },
    "markdown image": {
        "scope": "markdown",
        "prefix": "image",
        "body": "![$1](/$1.png)",
    },
    "next server": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "next server",
        "body": [
            "import { NextRequest, NextResponse } from \"next/server\"",
            "",
            "export default async function (request: NextRequest, response: NextResponse) {",
            "    $0",
            "}",
        ],
    },
    "import css": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "css",
        "body": [
            "import \"./${TM_FILENAME_BASE}.css\""
        ],
    },
    "function": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "fn",
        "body": [
            "export function ${TM_FILENAME_BASE}() {",
            "    $0",
            "}",
            ""
        ],
    },
    "async function": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "afn",
        "body": [
            "export async function ${TM_FILENAME_BASE}() {",
            "    $0",
            "}",
            ""
        ],
    },
    "columns": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "columns",
        "body": [
            "const columns: Columns<$0> = [",
            "    {",
            "        title: \"序号\",",
            "        align: \"center\",",
            "        key: \"index\",",
            "        render(value, record, index) {",
            "            return index + 1 + (pageNum - 1) * pageSize",
            "        }",
            "    },",
            "    {",
            "        title: \"操作\",",
            "        align: \"center\",",
            "        key: \"index\",",
            "        dataIndex: \"id\",",
            "        render(value, record, index) {",
            "            return (",
            "                <div className=\"flex justify-center gap-2\">",
            "                    <Button type=\"primary\">编辑</Button>",
            "                    <Popconfirm title=\"确认删除\">",
            "                        <Button type=\"primary\" danger>",
            "                            删除",
            "                        </Button>",
            "                    </Popconfirm>",
            "                </div>",
            "            )",
            "        }",
            "    }",
            "]",
        ],
    },
    "table": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "table",
        "body": [
            "<Table<$0>",
            "    dataSource={data?.list}",
            "    columns={columns}",
            "    pagination={{",
            "        current: pageNum,",
            "        pageSize,",
            "        total: data?.total,",
            "        showTotal,",
            "        onChange(pageNum, pageSize) {",
            "            setQuery(query => ({ ...query, pageNum, pageSize }))",
            "        }",
            "    }}",
            "/>",
        ],
    },
    "input": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "input",
        "body": [
            "<Input allowClear autoComplete=\"off\" />"
        ],
    },
    "select": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "select",
        "body": [
            "<Select",
            "    className=\"!w-24\"",
            "    allowClear",
            "    options={[",
            "        { label: \"$1\", value: \"$2\" },",
            "        { label: \"$3\", value: \"$4\" }",
            "    ]}",
            "/>",
        ],
    },
    "management": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "management",
        "body": [
            "import { PlusCircleOutlined } from \"@ant-design/icons\"",
            "import { useMutation, useQuery } from \"@tanstack/react-query\"",
            "import { Button, Form, Popconfirm, Table, message } from \"antd\"",
            "import { useForm } from \"antd/es/form/Form\"",
            "import FormItem from \"antd/es/form/FormItem\"",
            "import { Title } from \"deepsea-components\"",
            "import { getPositiveIntParser, showTotal } from \"deepsea-tools\"",
            "import { FC, useState } from \"react\"",
            "import { useQueryState } from \"soda-next\"",
            "import { Columns } from \"soda-type\"",
            "",
            "import { delete${1/^([a-zA-Z])/${1:/upcase}/}Action } from \"@/actions/delete${1/^([a-zA-Z])/${1:/upcase}/}\"",
            "import { query${1/^([a-zA-Z])/${1:/upcase}/}Action } from \"@/actions/query${1/^([a-zA-Z])/${1:/upcase}/}\"",
            "",
            "import ${1/^([a-zA-Z])/${1:/upcase}/}Editor from \"@/components/${1/^([a-zA-Z])/${1:/upcase}/}Editor\"",
            "",
            "import { ${1/^([a-zA-Z])/${1:/upcase}/}, Query${1/^([a-zA-Z])/${1:/upcase}/}Params } from \"@/server/query${1/^([a-zA-Z])/${1:/upcase}/}\"",
            "",
            "import { getDataRequest } from \"@/utils/getDataRequest\"",
            "",
            "const page: FC = () => {",
            "    const [editId, setEditId] = useState<string | undefined>(undefined)",
            "    const [openEditor, setOpenEditor] = useState(false)",
            "",
            "    const [query, setQuery] = useQueryState({",
            "        keys: [],",
            "        parse: {",
            "            page${3:Num}: getPositiveIntParser(1),",
            "            pageSize: getPositiveIntParser(10),",
            "        },",
            "    })",
            "",
            "    const { page${3:Num}, pageSize } = query",
            "    const [form] = useForm<Query${1/^([a-zA-Z])/${1:/upcase}/}Params>()",
            "",
            "    const { data, isLoading, refetch } = useQuery({",
            "        queryKey: [\"query-${1/^([a-zA-Z])/${1:/downcase}/}\", query],",
            "        queryFn: getDataRequest(query${1/^([a-zA-Z])/${1:/upcase}/}Action).preset(query),",
            "    })",
            "",
            "    const { mutateAsync: delete${1/^([a-zA-Z])/${1:/upcase}/}Async, isPending: isDelete${1/^([a-zA-Z])/${1:/upcase}/}Pending } = useMutation({",
            "        mutationFn: getDataRequest(delete${1/^([a-zA-Z])/${1:/upcase}/}Action),",
            "        onSuccess: () => message.success(\"删除成功\"),",
            "        onSettled: () => refetch(),",
            "    })",
            "",
            "    const columns: Columns<${1/^([a-zA-Z])/${1:/upcase}/}> = [",
            "        {",
            "            title: \"序号\",",
            "            align: \"center\",",
            "            key: \"index\",",
            "            render(value, record, index) {",
            "                return index + 1 + (page${3:Num} - 1) * pageSize",
            "            },",
            "        },",
            "        {",
            "            title: \"操作\",",
            "            align: \"center\",",
            "            key: \"operation\",",
            "            dataIndex: \"id\",",
            "            render(value, record, index) {",
            "                return (",
            "                    <div className=\"flex justify-center gap-2\">",
            "                        <Button type=\"primary\" onClick={() => update${1/^([a-zA-Z])/${1:/upcase}/}(value)}>",
            "                            编辑",
            "                        </Button>",
            "                        <Popconfirm title=\"确认删除\" onConfirm={() => delete${1/^([a-zA-Z])/${1:/upcase}/}Async(value)}>",
            "                            <Button type=\"primary\" loading={isDelete${1/^([a-zA-Z])/${1:/upcase}/}Pending} danger>",
            "                                删除",
            "                            </Button>",
            "                        </Popconfirm>",
            "                    </div>",
            "                )",
            "            },",
            "        },",
            "    ]",
            "",
            "    async function add${1/^([a-zA-Z])/${1:/upcase}/}() {",
            "        setEditId(undefined)",
            "        setOpenEditor(true)",
            "    }",
            "",
            "    async function update${1/^([a-zA-Z])/${1:/upcase}/}(id: string) {",
            "        setEditId(id)",
            "        setOpenEditor(true)",
            "    }",
            "",
            "    async function query${1/^([a-zA-Z])/${1:/upcase}/}(data: Query${1/^([a-zA-Z])/${1:/upcase}/}Params) {",
            "        const { page${3:Num}, pageSize, ...rest } = data",
            "        setQuery(query => ({ ...query, ...rest }))",
            "    }",
            "",
            "    return (",
            "        <div className=\"flex flex-col gap-8\">",
            "            <Title>${2:物品}管理</Title>",
            "            <div className=\"flex justify-between\">",
            "                <${1/^([a-zA-Z])/${1:/upcase}/}Editor id={editId} open={openEditor} onOpenChange={setOpenEditor} onSuccess={() => refetch()} />",
            "                <Form<Query${1/^([a-zA-Z])/${1:/upcase}/}Params> form={form} disabled={isLoading} layout=\"inline\" onFinish={query${1/^([a-zA-Z])/${1:/upcase}/}}>",
            "                    <FormItem<Query${1/^([a-zA-Z])/${1:/upcase}/}Params>>",
            "                        <Button type=\"primary\" htmlType=\"submit\">",
            "                            搜索",
            "                        </Button>",
            "                    </FormItem>",
            "                    <FormItem<Query${1/^([a-zA-Z])/${1:/upcase}/}Params>>",
            "                        <Button htmlType=\"reset\" onClick={() => setQuery({})}>",
            "                            重置",
            "                        </Button>",
            "                    </FormItem>",
            "                </Form>",
            "                <div className=\"flex flex-none gap-4\">",
            "                    <Button type=\"primary\" icon={<PlusCircleOutlined />} onClick={add${1/^([a-zA-Z])/${1:/upcase}/}}>",
            "                        新增${2:物品}",
            "                    </Button>",
            "                </div>",
            "            </div>",
            "            <Table<${1/^([a-zA-Z])/${1:/upcase}/}>",
            "                loading={isLoading}",
            "                dataSource={data?.list}",
            "                columns={columns}",
            "                rowKey={item => item.id}",
            "                pagination={{",
            "                    current: page${3:Num},",
            "                    pageSize,",
            "                    total: data?.total,",
            "                    showTotal,",
            "                    onChange(page${3:Num}, pageSize) {",
            "                        setQuery(query => ({ ...query, page${3:Num}, pageSize }))",
            "                    },",
            "                }}",
            "            />",
            "        </div>",
            "    )",
            "}",
            "",
            "export default page",
            "",
        ],
    },
    "editor": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "editor",
        "body": [
            "import { FC, useEffect } from \"react\"",
            "import { useMutation, useQuery } from \"@tanstack/react-query\"",
            "import { Form, Input, Modal, Select, message } from \"antd\"",
            "import { useForm } from \"antd/es/form/Form\"",
            "import FormItem from \"antd/es/form/FormItem\"",
            "import TextArea from \"antd/es/input/TextArea\"",
            "import { getEnumOptions, getErrorMessage } from \"deepsea-tools\"",
            "import { EditorProps } from \"soda-type\"",
            "",
            "import { add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Action } from \"@/actions/add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}\"",
            "import { get${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Action } from \"@/actions/get${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}\"",
            "import { update${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Action } from \"@/actions/update${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}\"",
            "",
            "import { Add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Params } from \"@/schema/add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}\"",
            "",
            "import { ${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/} } from \"@/server/query${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}\"",
            "",
            "import { getDataRequest } from \"@/utils/getDataRequest\"",
            "",
            "",
            "export type ${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}EditorProps = EditorProps<${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}>",
            "",
            "const ${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Editor: FC<${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}EditorProps> = props => {",
            "    const { id, open, onOpenChange, onSuccess, onError } = props",
            "    const isUpdate = !!id",
            "    const [form] = useForm<Add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Params>()",
            "",
            "    const { data, isLoading } = useQuery({",
            "        queryKey: [\"get-${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/downcase}${2}/}\", id],",
            "        queryFn: !!id ? getDataRequest(get${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Action).preset(id) : undefined,",
            "        enabled: !!open,",
            "    })",
            "",
            "    const { mutateAsync, isPending } = useMutation({",
            "        mutationFn: (data: Add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Params) =>",
            "            isUpdate ? getDataRequest(update${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Action)({ ...data, id }) : getDataRequest(add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Action)(data),",
            "        onMutate: () =>",
            "            void message.loading({",
            "                content: `\\${isUpdate ? \"修改\" : \"新增\"}${1}中...`,",
            "                key: \"loading\",",
            "            }),",
            "        onSuccess: data => {",
            "            message.success(`\\${isUpdate ? \"修改\" : \"新增\"}${1}成功`)",
            "            onSuccess?.(data!)",
            "            onOpenChange?.(false)",
            "        },",
            "        onError: error => {",
            "            message.error(getErrorMessage(error))",
            "            onError?.(error)",
            "        },",
            "        onSettled: () => message.destroy(\"loading\"),",
            "    })",
            "",
            "    useEffect(() => {",
            "        if (!open || !data) return",
            "        form.setFieldsValue(data)",
            "    }, [open, data])",
            "",
            "    useEffect(() => {",
            "        if (id) return () => form.resetFields()",
            "    }, [id])",
            "",
            "    return (",
            "        <Modal",
            "            title={id ? \"修改${1}\" : \"新增${1}\"}",
            "            open={open}",
            "            onOk={isPending ? undefined : () => form.submit()}",
            "            onCancel={isPending ? undefined : () => onOpenChange?.(false)}",
            "        >",
            "            <Form<Add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Params> form={form} disabled={isLoading || isPending} onFinish={mutateAsync}>",
            "                <FormItem<Add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Params> name=\"name\" label=\"名称\">",
            "                    <Input allowClear autoComplete=\"off\" />",
            "                </FormItem>",
            "            </Form>",
            "        </Modal>",
            "    )",
            "}",
            "",
            "export default ${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Editor",
            "",
        ],
    },
    "request data": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "request",
        "body": [
            "import { request } from \"@utils/request\"",
            "import { cookieStorage } from \"./cookieStorage\"",
            "import { getErrorMessage, isPlainObject } from \"deepsea-tools\"",
            "",
            "export type ResponseData = {",
            "    json: any",
            "    blob: Blob",
            "    text: string",
            "    arrayBuffer: ArrayBuffer",
            "    formData: FormData",
            "    stream: Response",
            "}",
            "",
            "export type ResponseType = keyof ResponseData",
            "",
            "export type RequestOptions<T extends ResponseType = \"json\"> = Omit<RequestInit, \"body\" | \"method\"> & {",
            "    method?: \"GET\" | \"POST\" | \"DELETE\" | \"HEAD\" | \"OPTIONS\" | \"PUT\" | \"PATCH\" | \"CONNECT\" | \"TRACE\" | (string & {})",
            "    /**",
            "     * 响应的数据类型，默认 json",
            "     * @default \"json\"",
            "     */",
            "    type?: T",
            "    base?: string | URL",
            "    body?: BodyInit | Record<string, any> | any[]",
            "    search?: (string | number | boolean)[][] | Record<string, string | number | boolean> | string | URLSearchParams",
            "}",
            "",
            "export async function request<T extends ResponseType = \"json\">(input: string | URL, options?: RequestOptions<T>): Promise<ResponseData[T]> {",
            "    let { headers, type = \"json\", body, base, search, method, ...rest } = options ?? {}",
            "    const url = new URL(input, typeof input === \"string\" ? base ?? process.env.PUBLIC_API_URL : undefined)",
            "",
            "    if (search) {",
            "        if (Array.isArray(search)) search = search.map(item => item.map(i => String(i)))",
            "        if (isPlainObject(search)) search = Object.entries(search).map(([key, value]) => [key, String(value)])",
            "        search = new URLSearchParams(search as any)",
            "        if (url.search) url.search = `\\${url.search}&\\${search.toString()}`",
            "        else url.search = search.toString()",
            "    }",
            "",
            "    if (type !== \"json\" && type !== \"blob\" && type !== \"text\" && type !== \"arrayBuffer\" && type !== \"formData\" && type !== \"stream\") throw new Error(`Invalid response type: \\${type}`)",
            "",
            "    headers = new Headers(headers)",
            "",
            "    if (typeof input === \"string\" && !base) {",
            "        const token = cookieStorage.getItem(\"token\")",
            "        if (token) headers.set(\"Authorization\", `bearer \\${token}`)",
            "    }",
            "",
            "    if (body && (isPlainObject(body) || Array.isArray(body))) {",
            "        headers.set(\"Content-Type\", \"application/json\")",
            "        method ??= \"POST\"",
            "        body = JSON.stringify(body)",
            "    }",
            "",
            "    try {",
            "        const response = await fetch(url, { headers, body, method, ...rest } as RequestInit)",
            "        switch (type) {",
            "            case \"json\":",
            "                const result = await response.json()",
            "                if (!result.success) {",
            "                    if (result.code === \"302\") {",
            "                        cookieStorage.removeItem(\"token\")",
            "                        location.href = `/login?from=\\${encodeURIComponent(`\\${location.pathname}\\${location.search}`)}`",
            "                        return",
            "                    }",
            "                    throw new Error(result.message)",
            "                }",
            "                return result.data",
            "            case \"blob\":",
            "                return await response.blob()",
            "            case \"text\":",
            "                return await response.text()",
            "            case \"arrayBuffer\":",
            "                return await response.arrayBuffer()",
            "            case \"formData\":",
            "                return await response.formData()",
            "            case \"stream\":",
            "                return response",
            "        }",
            "    } catch (error) {",
            "        message.error(getErrorMessage(error))",
            "        throw error",
            "    }",
            "}",
            "",
        ],
    },
    "getDataRequest": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "getdatarequest",
        "body": [
            "import { DataResponse } from \"./getDataResponse\"",
            "",
            "export type GetLoaderDataType<Loader extends (...args: any[]) => Promise<DataResponse<any> | undefined | void>> = Exclude<",
            "    Awaited<ReturnType<Loader>>,",
            "    undefined | void",
            ">[\"data\"]",
            "",
            "export interface RequestEventListener<",
            "    Loader extends (...args: any[]) => Promise<DataResponse<any> | undefined | void> = (...args: unknown[]) => Promise<DataResponse<unknown>>,",
            "> {",
            "    success: (data: GetLoaderDataType<Loader>) => void",
            "    error: (error: unknown, args: Parameters<Loader>) => void",
            "    settled: (error: unknown, data: GetLoaderDataType<Loader>, args: Parameters<Loader>) => void",
            "}",
            "",
            "export type RequestEventListeners<",
            "    Loader extends (...args: any[]) => Promise<DataResponse<any> | undefined | void> = (...args: unknown[]) => Promise<DataResponse<unknown>>,",
            "> = {",
            "    [Event in keyof RequestEventListener<Loader>]: Array<RequestEventListener<Loader>[Event]>",
            "}",
            "",
            "export interface DataRequest<Loader extends (...args: any[]) => Promise<DataResponse<any> | undefined | void>> {",
            "    (...args: Parameters<Loader>): Promise<GetLoaderDataType<Loader>>",
            "    onSuccess(listener: RequestEventListener<Loader>[\"success\"] | undefined): this",
            "    onError(listener: RequestEventListener<Loader>[\"error\"] | undefined): this",
            "    onSettled(listener: RequestEventListener<Loader>[\"settled\"] | undefined): this",
            "    preset(...args: Parameters<Loader>): Omit<DataRequest<() => ReturnType<Loader>>, \"preset\">",
            "}",
            "",
            "const map: RequestEventListeners = {",
            "    success: [],",
            "    error: [],",
            "    settled: [],",
            "}",
            "",
            "export function getRequestEventListeners<Event extends keyof RequestEventListener>(event: Event): Array<RequestEventListener[Event]> {",
            "    return map[event]",
            "}",
            "",
            "export function removeRequestEventListener<Event extends keyof RequestEventListener>(event: Event, listener: RequestEventListener[Event]) {",
            "    map[event] = map[event].filter(item => item !== listener) as any",
            "}",
            "",
            "export function addRequestEventListener<Event extends keyof RequestEventListener>(event: Event, listener: RequestEventListener[Event]) {",
            "    if (!map[event].includes(listener)) map[event].push(listener)",
            "    function removeListener() {",
            "        removeRequestEventListener(event, listener)",
            "    }",
            "    return removeListener",
            "}",
            "",
            "export function getDataRequest<Loader extends (...args: any[]) => Promise<DataResponse<any> | undefined | void>>(loader: Loader): DataRequest<Loader> {",
            "    function _getDataRequest<Loader extends (...args: any[]) => Promise<DataResponse<any> | undefined | void>, PresetArgs = undefined>(",
            "        loader: Loader,",
            "        presetArgs?: PresetArgs,",
            "    ): PresetArgs extends undefined ? DataRequest<Loader> : Omit<DataRequest<() => ReturnType<Loader>>, \"preset\"> {",
            "        let onSuccessListener: RequestEventListener<Loader>[\"success\"] | undefined",
            "        let onErrorListener: RequestEventListener<Loader>[\"error\"] | undefined",
            "        let onSettledListener: RequestEventListener<Loader>[\"settled\"] | undefined",
            "",
            "        async function request(...args: Parameters<Loader>): Promise<GetLoaderDataType<Loader>> {",
            "            try {",
            "                const result = (await loader(...args)) ?? { success: true }",
            "                const { success, data, message } = result",
            "                if (!success) throw new Error(message)",
            "                onSuccessListener?.(data)",
            "                getRequestEventListeners(\"success\").forEach(listener => listener(data))",
            "                onSettledListener?.(undefined, data, (presetArgs ?? args) as any)",
            "                getRequestEventListeners(\"settled\").forEach(listener => listener(undefined, data, (presetArgs ?? args) as any))",
            "                return data",
            "            } catch (error) {",
            "                onErrorListener?.(error, (presetArgs ?? args) as any)",
            "                getRequestEventListeners(\"error\").forEach(listener => listener(error, (presetArgs ?? args) as any))",
            "                onSettledListener?.(error, undefined, (presetArgs ?? args) as any)",
            "                getRequestEventListeners(\"settled\").forEach(listener => listener(error, undefined, (presetArgs ?? args) as any))",
            "                throw error",
            "            }",
            "        }",
            "",
            "        if (loader.name) Object.defineProperty(request, \"name\", { value: loader.name })",
            "",
            "        request.onSuccess = function onSuccess(listener?: RequestEventListener<Loader>[\"success\"]) {",
            "            onSuccessListener = listener",
            "            return request",
            "        }",
            "",
            "        request.onError = function onError(listener: RequestEventListener<Loader>[\"error\"]) {",
            "            onErrorListener = listener",
            "            return request",
            "        }",
            "",
            "        request.onSettled = function onSettled(listener: RequestEventListener<Loader>[\"settled\"]) {",
            "            onSettledListener = listener",
            "            return request",
            "        }",
            "",
            "        if (!presetArgs) {",
            "            request.preset = function preset(...args: Parameters<Loader>) {",
            "                async function request(): Promise<GetLoaderDataType<Loader>> {",
            "                    return await loader(...args)",
            "                }",
            "",
            "                if (loader.name) Object.defineProperty(request, \"name\", { value: loader.name })",
            "",
            "                return _getDataRequest(request, args)",
            "            }",
            "        }",
            "",
            "        return request as any",
            "    }",
            "",
            "    return _getDataRequest(loader)",
            "}",
            "",
        ],
    },
    "getDataResponse": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "getdataresponse",
        "body": [
            "export type DataResponse<Data = any> = {",
            "    success: boolean",
            "    data?: Data",
            "    /** 消息 */",
            "    message?: string",
            "    /** 状态码 */",
            "    code?: number",
            "}",
            "",
            "export type ClientErrorOptions = Pick<DataResponse, \"message\" | \"code\"> & {",
            "    /** 原始错误 */",
            "    origin?: unknown",
            "}",
            "",
            "/** 可以暴露给客户端的错误 */",
            "export class ClientError extends Error {",
            "    /** 原始的错误 */",
            "    origin?: unknown",
            "    /** 错误代码 */",
            "    code?: number",
            "",
            "    constructor(messageOrOptions?: string | ClientErrorOptions) {",
            "        if (typeof messageOrOptions === \"string\") {",
            "            super(messageOrOptions)",
            "            return",
            "        }",
            "        const { message, code, origin } = messageOrOptions ?? {}",
            "        super(message)",
            "        this.origin = origin",
            "        this.code = code",
            "    }",
            "}",
            "",
            "export async function getDataResponse<Data>(action: () => Promise<Data>): Promise<DataResponse<Data>> {",
            "    let success = true",
            "    let data: Data | undefined",
            "    let message: string | undefined",
            "    try {",
            "        data = await action()",
            "    } catch (error) {",
            "        if (!(error instanceof ClientError)) throw error",
            "        success = false",
            "        message = error.message",
            "    }",
            "    return { success, data, message }",
            "}",
            "",
        ],
    },
    "server only": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "so",
        "body": [
            "import \"server-only\"",
            ""
        ],
    },
    "server action": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "server",
        "body": [
            "import \"server-only\"",
            "",
            "import { prisma } from \"@/prisma\"",
            "",
            "import { ${TM_FILENAME_BASE/^([a-zA-Z])/${1:/upcase}/}Params, ${TM_FILENAME_BASE}Parser } from \"@/schema/${TM_FILENAME_BASE}\"",
            "",
            "export async function ${TM_FILENAME_BASE}(params: ${TM_FILENAME_BASE/^([a-zA-Z])/${1:/upcase}/}Params) {",
            "    params = ${TM_FILENAME_BASE}Parser(params)",
            "    $0",
            "}",
            "",
        ],
    },
    "submit hook": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "submit",
        "body": [
            "const { mutateAsync, isPending } = useMutation({",
            "    mutationFn: (data: Add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Params) =>",
            "        isUpdate ? getDataRequest(update${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Action)(update${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Parser({...data, id})) : getDataRequest(add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Action)(add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Parser(data)),",
            "    onMutate: () =>",
            "        void message.loading({",
            "            content: `\\${isUpdate ? \"修改\" : \"新增\"}$0中...`,",
            "            key: \"loading\",",
            "        }),",
            "    onSuccess: data => {",
            "        message.success(`\\${isUpdate ? \"修改\" : \"新增\"}$0成功`)",
            "        onSuccess?.(data!)",
            "        onOpenChange?.(false)",
            "    },",
            "    onError: error => {",
            "        message.error(getErrorMessage(error))",
            "        onError?.(error)",
            "    },",
            "    onSettled: () => message.destroy(\"loading\"),",
            "})",
        ],
    },
    "schema": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "schema",
        "body": [
            "import { getParser } from \".\"",
            "import { z } from \"zod\"",
            "",
            "export const ${TM_FILENAME_BASE}Schema = z.string({ message: \"无效的 ${TM_FILENAME_BASE}\" })",
            "",
            "export type ${TM_FILENAME_BASE/^([a-zA-Z])/${1:/upcase}/}Params = z.infer<typeof ${TM_FILENAME_BASE}Schema>",
            "",
            "export const ${TM_FILENAME_BASE}Parser = getParser(${TM_FILENAME_BASE}Schema)",
            ""
        ]
    },
    "useState snippet": {
        "prefix": "state",
        "body": [
            "const [$1, set${1/^([a-z])/${1:/upcase}/}] = useState($2)"
        ],
        "description": "Create useState hook with auto-capitalized setState"
    },
    "getPrismaConfig": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "gpc",
        "body": [
            "import { Prisma } from \"@prisma/client\"",
            "import { DefaultArgs } from \"@prisma/client/runtime/library\"",
            "",
            "export function ${TM_FILENAME_BASE}<",
            "    T extends Prisma.${TM_FILENAME_BASE/^get(.+?)[A-Z][a-z]+$/${1}/}FindManyArgs,",
            "    P extends Prisma.SelectSubset<T, Prisma.${TM_FILENAME_BASE/^get(.+?)[A-Z][a-z]+$/${1}/}FindManyArgs<DefaultArgs>>[\"${TM_FILENAME_BASE/^get(.+?)([A-Z][a-z]+)$/${2:/downcase}/}\"],",
            ">(${TM_FILENAME_BASE/^get(.+?)([A-Z][a-z]+)$/${2:/downcase}/}: P): P {",
            "    return ${TM_FILENAME_BASE/^get(.+?)([A-Z][a-z]+)$/${2:/downcase}/}",
            "}",
            ""
        ]
    },
    "BookEditor": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "bookeditor",
        "body": [
            "export type ${1} = {",
            "    id: string",
            "    name: string",
            "}",
            "",
            "export function edit${1}(${1/^([A-Z])/${1:/downcase}/}: ${1}) {",
            "    return ${1/^([A-Z])/${1:/downcase}/}",
            "}"
        ]
    }
}