{
    // Place your snippets for ignore here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,javascriptreact,typescript,typescriptreact",
    //  "prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Print to console": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "l",
        "body": [
            "console.log($0)"
        ],
        "description": "Log output to console",
    },
    "for i": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "fori",
        "body": [
            "for (let i = 0; i < $0; i++) {",
            "    ",
            "}"
        ],
        "description": "fori",
    },
    "forof": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "forof",
        "body": [
            "for (const $1 of $0) {",
            "    ",
            "}"
        ],
        "description": "foriof",
    },
    "for i of": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "foriof",
        "body": [
            "for (const i of $0) {",
            "    ",
            "}"
        ],
        "description": "foriof",
    },
    "for j of": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "forjof",
        "body": [
            "for (const j of $0) {",
            "    ",
            "}"
        ],
        "description": "forjof",
    },
    "for array": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "fora",
        "body": [
            "for (let i = 0; i < $0.length; i++) {",
            "    ",
            "}"
        ],
        "description": "fora",
    },
    "for j": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "forj",
        "body": [
            "for (let j = 0; j < $0; j++) {",
            "    ",
            "}"
        ],
        "description": "forj",
    },
    "MutationObserver": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "mo",
        "body": [
            "const targetNode = document.getElementsByClassName(\"$0\")[0]",
            "const config = { attributes: true, childList: true, subtree: true }",
            "const callback = function (mutationsList, observer) {",
            "    for (const i of mutationsList) {",
            "        ",
            "    }",
            "}",
            "const observer = new MutationObserver(callback)",
            "observer.observe(targetNode, config)",
        ],
        "description": "MutationObserver",
    },
    "did": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "did",
        "body": [
            "document.getElementById(\"$0\")"
        ],
        "description": "did",
    },
    "dcs": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "dcs",
        "body": [
            "document.getElementsByClassName(\"$0\")"
        ],
        "description": "dcs",
    },
    "dcd": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "dcd",
        "body": [
            "document.createElement(\"div\")",
            "$0"
        ],
        "description": "dcd",
    },
    "iexp": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "iexp",
        "body": [
            "import express from \"express\"",
            "$0"
        ],
        "description": "NodeJs Expresss Module",
    },
    "require": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "req",
        "body": [
            "require(\"$0\")"
        ],
        "description": "require(something)",
    },
    "ed": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "ed",
        "body": [
            "export default $0"
        ],
        "description": "export default",
    },
    "dce": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "dce",
        "body": [
            "document.createElement(\"$0\")"
        ],
        "description": "document.createElement",
    },
    "dqs": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "dqs",
        "body": [
            "document.querySelector(\"$0\")"
        ],
        "description": "document.querySelector",
    },
    "zs": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "zs",
        "body": [
            "/** $0 */"
        ],
        "description": "TypeScript 注释",
    },
    "expreq": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "expreq",
        "body": [
            "async (request, response) => {",
            "    $0",
            "}"
        ],
    },
    "export component": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "ec",
        "body": [
            "import { ComponentProps, FC } from \"react\"",
            "import { clsx } from \"deepsea-tools\"",
            "import { StrictOmit } from \"soda-type\"",
            "",
            "export interface ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}Props extends StrictOmit<ComponentProps<\"$1\">, \"children\"> {",
            "",
            "}",
            "",
            "export const ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}: FC<${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}Props> = props => {",
            "    const { className, ...rest } = props",
            "",
            "    return (",
            "        <$1 className={clsx(\"$2\", className)} {...rest}>",
            "            $0",
            "        </$1>",
            "    )",
            "}",
            "",
        ],
    },
    "export default component": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "edc",
        "body": [
            "import { ComponentProps, FC } from \"react\"",
            "import { clsx } from \"deepsea-tools\"",
            "import { StrictOmit } from \"soda-type\"",
            "",
            "export interface ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}Props extends StrictOmit<ComponentProps<\"$1\">, \"children\"> {",
            "",
            "}",
            "",
            "const ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}: FC<${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}Props> = ({ className, ...rest }) => {",
            "",
            "    return (",
            "        <$1 className={clsx(\"$2\", className)} {...rest}>",
            "            $0",
            "        </$1>",
            "    )",
            "}",
            "",
            "export default ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}",
            "",
        ],
    },
    "export default props component": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "edpc",
        "body": [
            "import { CSSProperties, FC, ReactNode } from \"react\"",
            "import { clsx } from \"deepsea-tools\"",
            "",
            "export interface ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}Props {",
            "    className?: string",
            "    style?: CSSProperties",
            "    children?: ReactNode",
            "}",
            "",
            "const ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}: FC<${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}Props> = ({ className, ...rest }) => {",
            "",
            "    return (",
            "        <$1 className={clsx(\"$2\", className)} {...rest}>",
            "            $0",
            "        </$1>",
            "    )",
            "}",
            "",
            "export default ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}",
            "",
        ],
    },
    "export default function component": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "edfc",
        "body": [
            "import { ComponentProps, FC } from \"react\"",
            "import { clsx } from \"deepsea-tools\"",
            "import { StrictOmit } from \"soda-type\"",
            "",
            "export interface ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}Props extends StrictOmit<ComponentProps<typeof $1>, \"children\"> {",
            "",
            "}",
            "",
            "const ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}: FC<${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}Props> = ({ className, ...rest }) => {",
            "",
            "    return (",
            "        <$1 className={clsx(\"$2\", className)} {...rest}>",
            "            $0",
            "        </$1>",
            "    )",
            "}",
            "",
            "export default ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}",
            "",
        ],
    },
    "export default View": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "edv",
        "body": [
            "import { ComponentProps, FC } from \"react\"",
            "import { View } from \"react-native\"",
            "import { StrictOmit } from \"soda-type\"",
            "",
            "export interface ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}Props extends StrictOmit<ComponentProps<typeof View>, \"children\"> {",
            "",
            "}",
            "",
            "const ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}: FC<${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}Props> = props => {",
            "    const { style, ...rest } = props",
            "",
            "    return (",
            "        <View style={[{}, style]} {...rest}>",
            "            $0",
            "        </View>",
            "    )",
            "}",
            "",
            "export default ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}",
            "",
        ],
    },
    "export blank component": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "ebc",
        "body": [
            "import { FC } from \"react\"",
            "",
            "export const ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}: FC = () => {",
            "",
            "    return (",
            "        <$1>",
            "            $0",
            "        </$1>",
            "    )",
            "}",
            "",
        ],
    },
    "export default blank component": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "edbc",
        "body": [
            "import { FC } from \"react\"",
            "",
            "const ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}: FC = () => {",
            "",
            "    return (",
            "        <$1>",
            "            $0",
            "        </$1>",
            "    )",
            "}",
            "",
            "export default ${TM_FILENAME_BASE/(^|-)(.)/${2:/upcase}/g}",
            "",
        ],
    },
    "jsdoc": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "jsdoc",
        "body": [
            "/**",
            " * @author Lu Rong <lurongv@qq.com>",
            " * @create $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
            " * @description $1",
            " */",
            "",
            "$0",
        ],
    },
    "vue": {
        "scope": "vue",
        "prefix": "vue",
        "body": [
            "<script setup lang=\"ts\" >",
            "$0",
            "</script>",
            "",
            "<template>",
            "    ",
            "</template>",
            "",
            "<style scoped>",
            "    ",
            "</style>"
        ],
    },
    "export IonPage": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "ionpage",
        "body": [
            "import { IonBackButton, IonButtons, IonContent, IonHeader, IonPage, IonTitle, IonToolbar } from \"@ionic/react\"",
            "import { FC } from \"react\"",
            "",
            "export const ${TM_FILENAME_BASE}: FC = () => {",
            "    return (",
            "        <IonPage>",
            "            <IonHeader translucent>",
            "                <IonToolbar>",
            "                    <IonButtons slot=\"start\">",
            "                        <IonBackButton text=\"返回\" />",
            "                    </IonButtons>",
            "                    <IonTitle>$1</IonTitle>",
            "                </IonToolbar>",
            "            </IonHeader>",
            "            <IonContent fullscreen>",
            "                <div className=\"flex-y min-h-full\">",
            "                    $0",
            "                </div>",
            "            </IonContent>",
            "        </IonPage>",
            "    )",
            "}",
            "",
        ],
    },
    "next layout": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "layout",
        "body": [
            "import { FC, ReactNode } from \"react\"",
            "",
            "export interface LayoutProps {",
            "    children?: ReactNode",
            "}",
            "",
            "const Layout: FC<LayoutProps> = props => {",
            "    const { children } = props",
            "",
            "    return (",
            "        <div className=\"\">",
            "            {children}",
            "        </div>",
            "    )",
            "}",
            "",
            "export default Layout",
            "",
        ],
    },
    "next root layout": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "rootlayout",
        "body": [
            "import { FC, ReactNode } from \"react\"",
            "import { Metadata } from \"next\"",
            "",
            "import AntdNextRegistry from \"@/components/AntdNextRegistry\"",
            "",
            "import \"./globals.css\"",
            "",
            "export const metadata: Metadata = {",
            "    title: \"$1\",",
            "    description: \"$0\"",
            "}",
            "",
            "export interface RootLayoutProps {",
            "    children?: ReactNode",
            "}",
            "",
            "const RootLayout: FC<RootLayoutProps> = props => {",
            "    const { children } = props",
            "",
            "    return (",
            "        <html lang=\"zh\">",
            "            <body>",
            "                <AntdNextRegistry>{children}</AntdNextRegistry>",
            "            </body>",
            "        </html>",
            "    )",
            "}",
            "",
            "export default RootLayout",
            "",
        ],
    },
    "next page": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "page",
        "body": [
            "import { FC } from \"react\"",
            "",
            "const Page: FC = () => {",
            "",
            "    return (",
            "        <div>",
            "            $0",
            "        </div>",
            "    )",
            "}",
            "",
            "export default Page",
            "",
        ],
    },
    "next page with props": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "propspage",
        "body": [
            "import { NextPageProps } from \"@/types\"",
            "import { FC } from \"react\"",
            "",
            "const Page: FC<NextPageProps> = props => {",
            "    const {",
            "        params: { $1 }",
            "    } = props",
            "",
            "    return (",
            "        <div>",
            "            $0",
            "        </div>",
            "    )",
            "}",
            "",
            "export default Page",
            "",
        ],
    },
    "antd registry with next": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "antd",
        "body": [
            "\"use client\"",
            "",
            "import { StyleProvider } from \"@ant-design/cssinjs\"",
            "import { AntdRegistry } from \"@ant-design/nextjs-registry\"",
            "import { ConfigProvider } from \"antd\"",
            "import zhCN from \"antd/locale/zh_CN\"",
            "import { FC, ReactNode } from \"react\"",
            "",
            "export interface RegistryProps {",
            "    children?: ReactNode",
            "}",
            "",
            "export const Registry: FC<RegistryProps> = props => {",
            "    const { children } = props",
            "",
            "    return (",
            "        <AntdRegistry>",
            "            <ConfigProvider locale={zhCN}>",
            "                <StyleProvider hashPriority=\"high\">{children}</StyleProvider>",
            "            </ConfigProvider>",
            "        </AntdRegistry>",
            "    )",
            "}",
            "",
        ],
    },
    "use client": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "uc",
        "body": [
            "\"use client\""
        ],
    },
    "use server": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "us",
        "body": [
            "\"use server\""
        ],
    },
    "next.js get function": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "get",
        "body": [
            "import { NextRequestConfig } from \"@/types\"",
            "import { NextRequest, NextResponse } from \"next/server\"",
            "",
            "export async function GET(request: NextRequest, config: NextRequestConfig) {",
            "    $0",
            "}",
        ],
    },
    "md": {
        "scope": "markdown",
        "prefix": "md",
        "body": [
            "---",
            "slug: ${TM_DIRECTORY/^(.+?)([^\\\\]+)$/$2/}",
            "title: $1",
            "authors: [1adybug]",
            "date: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}",
            "tags: []",
            "---",
            "",
            "$0",
        ],
    },
    "ai": {
        "scope": "markdown",
        "prefix": "ai",
        "body": [
            "_以下内容均为 `${1:Gemini 2.5 Pro}` 生成_",
        ],
    },
    "warning": {
        "scope": "markdown",
        "prefix": "warning",
        "body": [
            ":::warning",
            "",
            "$0",
            "",
            ":::"
        ],
    },
    "tip": {
        "scope": "markdown",
        "prefix": "tip",
        "body": [
            ":::tip",
            "",
            "$0",
            "",
            ":::"
        ],
    },
    "info": {
        "scope": "markdown",
        "prefix": "info",
        "body": [
            ":::info",
            "",
            "$0",
            "",
            ":::"
        ],
    },
    "success": {
        "scope": "markdown",
        "prefix": "success",
        "body": [
            ":::success",
            "",
            "$0",
            "",
            ":::"
        ],
    },
    "danger": {
        "scope": "markdown",
        "prefix": "danger",
        "body": [
            ":::danger",
            "",
            "$0",
            "",
            ":::"
        ],
    },
    "action": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "action",
        "body": [
            "\"use server\"",
            "",
            "import { ${TM_FILENAME_BASE/Action$//} } from \"@/server/${TM_FILENAME_BASE/Action$//}\"",
            "",
            "import { getDataResponse } from \"@/utils/getDataResponse\"",
            "",
            "export async function ${TM_FILENAME_BASE/Action$//}Action(...args: Parameters<typeof ${TM_FILENAME_BASE/Action$//}>) {",
            "    return await getDataResponse(${TM_FILENAME_BASE/Action$//}, ...args)",
            "}",
            "",
        ],
    },
    "main function": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "main",
        "body": [
            "async function main() {",
            "    $0",
            "}",
            "",
            "main()"
        ],
    },
    "markdown image": {
        "scope": "markdown",
        "prefix": "image",
        "body": "![$1](/$1.png)",
    },
    "next server": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "next server",
        "body": [
            "import { NextRequest, NextResponse } from \"next/server\"",
            "",
            "export default async function (request: NextRequest, response: NextResponse) {",
            "    $0",
            "}",
        ],
    },
    "import css": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "css",
        "body": [
            "import \"./${TM_FILENAME_BASE}.css\""
        ],
    },
    "function": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "fn",
        "body": [
            "export function ${TM_FILENAME_BASE}() {",
            "    $0",
            "}",
            ""
        ],
    },
    "common js function": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "cfn",
        "body": [
            "// @ts-check",
            "",
            "function ${TM_FILENAME_BASE}() {",
            "    $0",
            "}",
            "",
            "module.exports = {",
            "    ${TM_FILENAME_BASE}",
            "}"
        ],
    },
    "async function": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "afn",
        "body": [
            "export async function ${TM_FILENAME_BASE}() {",
            "    $0",
            "}",
            ""
        ],
    },
    "common js async function": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "cafn",
        "body": [
            "// @ts-check",
            "",
            "async function ${TM_FILENAME_BASE}() {",
            "    $0",
            "}",
            "",
            "module.exports = {",
            "    ${TM_FILENAME_BASE}",
            "}"
        ],
    },
    "columns": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "columns",
        "body": [
            "const columns: Columns<$0> = [",
            "    {",
            "        title: \"序号\",",
            "        align: \"center\",",
            "        key: \"index\",",
            "        render(value, record, index) {",
            "            return index + 1 + (pageNum - 1) * pageSize",
            "        }",
            "    },",
            "    {",
            "        title: \"操作\",",
            "        align: \"center\",",
            "        key: \"index\",",
            "        dataIndex: \"id\",",
            "        render(value, record, index) {",
            "            return (",
            "                <div className=\"flex justify-center gap-2\">",
            "                    <Button type=\"primary\">编辑</Button>",
            "                    <Popconfirm title=\"确认删除\">",
            "                        <Button type=\"primary\" danger>",
            "                            删除",
            "                        </Button>",
            "                    </Popconfirm>",
            "                </div>",
            "            )",
            "        }",
            "    }",
            "]",
        ],
    },
    "table": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "table",
        "body": [
            "<Table<$0>",
            "    dataSource={data?.list}",
            "    columns={columns}",
            "    pagination={{",
            "        current: pageNum,",
            "        pageSize,",
            "        total: data?.total,",
            "        showTotal,",
            "        onChange(pageNum, pageSize) {",
            "            setQuery(query => ({ ...query, pageNum, pageSize }))",
            "        }",
            "    }}",
            "/>",
        ],
    },
    "input": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "input",
        "body": [
            "<Input allowClear autoComplete=\"off\" />"
        ],
    },
    "select": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "select",
        "body": [
            "<Select",
            "    className=\"!w-24\"",
            "    allowClear",
            "    options={[",
            "        { label: \"$1\", value: \"$2\" },",
            "        { label: \"$3\", value: \"$4\" }",
            "    ]}",
            "/>",
        ],
    },
    "management": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "management",
        "body": [
            "import { FC, useRef, useState } from \"react\"",
            "import { PlusCircleOutlined } from \"@ant-design/icons\"",
            "import { useMutation, useQuery } from \"@tanstack/react-query\"",
            "import { Button, Form, Input, Popconfirm, Table } from \"antd\"",
            "import { useForm } from \"antd/es/form/Form\"",
            "import FormItem from \"antd/es/form/FormItem\"",
            "import { getPositiveIntParser, showTotal } from \"deepsea-tools\"",
            "import { Link } from \"react-router\"",
            "import { useQueryState } from \"soda-react-router\"",
            "import { Columns, useScroll } from \"soda-antd\"",
            "",
            "import { delete${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/} } from \"@/apis/delete${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}\"",
            "import { ${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}, Query${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}Params, query${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/} } from \"@/apis/query${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}\"",
            "",
            "import ${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}Editor from \"@/components/${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}Editor\"",
            "import DeepBreadCrumb from \"@/components/DeepBreadCrumb\"",
            "",
            "const ${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}Management: FC = () => {",
            "    const [editId, setEditId] = useState<string | undefined>(undefined)",
            "    const [openEditor, setOpenEditor] = useState(false)",
            "    const container = useRef<HTMLDivElement>(null)",
            "    const { y } = useScroll(container, { paginationMargin: 32 })",
            "",
            "    const [query, setQuery] = useQueryState({",
            "        keys: [\"name\"],",
            "        parse: {",
            "            pageNum: getPositiveIntParser(1),",
            "            pageSize: getPositiveIntParser(10),",
            "        },",
            "    })",
            "",
            "    const { pageNum, pageSize } = query",
            "    const [form] = useForm<Query${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}Params>()",
            "",
            "    const { data, isLoading, refetch } = useQuery({",
            "        queryKey: [\"query-${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/downcase}${2}/}\", query],",
            "        queryFn: () => query${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}(query),",
            "    })",
            "",
            "    const { mutate: onDelete${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}, isPending: isDelete${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}Pending } = useMutation({",
            "        mutationFn: delete${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/},",
            "        onSuccess: () => message.success(\"删除成功\"),",
            "        onSettled: () => refetch(),",
            "    })",
            "",
            "    const columns: Columns<${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}> = [",
            "        {",
            "            title: \"序号\",",
            "            align: \"center\",",
            "            key: \"index\",",
            "            render(value, record, index) {",
            "                return index + 1 + (pageNum - 1) * pageSize",
            "            },",
            "        },",
            "        {",
            "            title: \"名称\",",
            "            align: \"center\",",
            "            dataIndex: \"name\",",
            "            render(value, record) {",
            "                return <Link to={`/${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/downcase}${2}/}/\\${record.id}`}>{value}</Link>",
            "            },",
            "        },",
            "        {",
            "            title: \"操作\",",
            "            align: \"center\",",
            "            key: \"operation\",",
            "            dataIndex: \"id\",",
            "            render(value, record, index) {",
            "                return (",
            "                    <div className=\"flex justify-center gap-2\">",
            "                        <Button type=\"primary\" onClick={() => onUpdate${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}(value)}>",
            "                            编辑",
            "                        </Button>",
            "                        <Popconfirm title=\"确认删除\" onConfirm={() => onDelete${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}(value)}>",
            "                            <Button type=\"primary\" loading={isDelete${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}Pending} danger>",
            "                                删除",
            "                            </Button>",
            "                        </Popconfirm>",
            "                    </div>",
            "                )",
            "            },",
            "        },",
            "    ]",
            "",
            "    async function onAdd${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}() {",
            "        setEditId(undefined)",
            "        setOpenEditor(true)",
            "    }",
            "",
            "    async function onUpdate${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}(id: string) {",
            "        setEditId(id)",
            "        setOpenEditor(true)",
            "    }",
            "",
            "    async function onSubmit(data: Query${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}Params) {",
            "        const { pageNum, pageSize, ...rest } = data",
            "        setQuery(query => ({ ...query, ...rest, pageNum: 1 }))",
            "    }",
            "",
            "    return (",
            "        <div className=\"flex h-full flex-col gap-8 p-8\">",
            "            <title>$0管理</title>",
            "            <DeepBreadCrumb items={[{ title: \"$0管理\" }]} />",
            "            <div>",
            "                <Form<Query${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}Params> className=\"flex w-full gap-4\" form={form} layout=\"inline\" onFinish={onSubmit}>",
            "                    <FormItem<Query${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}Params> name=\"name\">",
            "                        <Input placeholder=\"请输入$0名称\" autoComplete=\"off\" />",
            "                    </FormItem>",
            "                    <FormItem<Query${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}Params>>",
            "                        <Button type=\"primary\" htmlType=\"submit\">",
            "                            搜索",
            "                        </Button>",
            "                    </FormItem>",
            "                    <FormItem<Query${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}Params>>",
            "                        <Button htmlType=\"reset\" onClick={() => setQuery({})}>",
            "                            重置",
            "                        </Button>",
            "                    </FormItem>",
            "                    <div className=\"ml-auto\">",
            "                        <${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}Editor id={editId} open={openEditor} onOpenChange={setOpenEditor} />",
            "                        <Button type=\"primary\" icon={<PlusCircleOutlined />} onClick={onAdd${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}}>",
            "                            新增$0",
            "                        </Button>",
            "                    </div>",
            "                </Form>",
            "            </div>",
            "            <div ref={container} className=\"flex-auto overflow-hidden\">",
            "                <Table<${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}>",
            "                    loading={isLoading}",
            "                    dataSource={data?.list}",
            "                    columns={columns}",
            "                    rowKey={item => item.id}",
            "                    scroll={{ y }}",
            "                    pagination={{",
            "                        current: pageNum,",
            "                        pageSize,",
            "                        total: data?.total,",
            "                        showTotal,",
            "                        onChange(pageNum, pageSize) {",
            "                            setQuery(query => ({ ...query, pageNum, pageSize }))",
            "                        },",
            "                    }}",
            "                />",
            "            </div>",
            "        </div>",
            "    )",
            "}",
            "",
            "export default ${TM_FILENAME_BASE/^([a-zA-Z])(.+?)-?[mM]anagement$/${1:/upcase}${2}/}Management",
            ""
        ]
    },
    "Editor": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "editor",
        "body": [
            "import { ComponentProps, FC, useEffect, useId } from \"react\"",
            "import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\"",
            "import { Form, Input, Modal, message } from \"antd\"",
            "import { useForm } from \"antd/es/form/Form\"",
            "import FormItem from \"antd/es/form/FormItem\"",
            "import { isNonNullable } from \"deepsea-tools\"",
            "",
            "import { add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Action } from \"@/actions/add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}\"",
            "import { get${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Action } from \"@/actions/get${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}\"",
            "import { update${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Action } from \"@/actions/update${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}\"",
            "",
            "import { Add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Params } from \"@/schema/add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}\"",
            "",
            "import { getDataRequest } from \"@/utils/getDataRequest\"",
            "",
            "export interface ${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}EditorProps extends Omit<ComponentProps<typeof Modal>, \"id\" | \"onClose\"> {",
            "    id?: number",
            "    onClose?: () => void",
            "}",
            "",
            "const ${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Editor: FC<${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}EditorProps> = ({ id, open, onClose, ...rest }) => {",
            "    const key = useId()",
            "    const isUpdate = isNonNullable(id)",
            "    const queryClient = useQueryClient()",
            "    const [form] = useForm<Add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Params>()",
            "",
            "    const { data, isLoading } = useQuery({",
            "        queryKey: [\"get-${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/downcase}${2}/}\", id],",
            "        queryFn: isNonNullable(id) ? getDataRequest(get${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Action).preset(id) : () => Promise.resolve(null),",
            "        enabled: !!open,",
            "    })",
            "",
            "    const { mutateAsync, isPending } = useMutation({",
            "        mutationFn: (data: Add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Params) => (isUpdate ? getDataRequest(update${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Action)({ ...data, id }) : getDataRequest(add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Action)(data)),",
            "        onMutate(params) {",
            "            message.loading({",
            "                content: `\\${isUpdate ? \"修改$0\" : \"新增$0\"}中...`,",
            "                key,",
            "            })",
            "        },",
            "        onSuccess(data) {",
            "            message.success(`\\${isUpdate ? \"修改$0\" : \"新增$0\"}成功`)",
            "        },",
            "        onError(error) {},",
            "        onSettled(data, error) {",
            "            message.destroy(key)",
            "            queryClient.invalidateQueries({ queryKey: [\"query-${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/downcase}${2}/}\", id] })",
            "        },",
            "    })",
            "",
            "    useEffect(() => {",
            "        if (!open || !data) return",
            "        form.setFieldsValue(data)",
            "    }, [open, data])",
            "",
            "    useEffect(() => {",
            "        if (id) return () => form.resetFields()",
            "    }, [id])",
            "",
            "    return (",
            "        <Modal",
            "            title={id ? \"修改$0\" : \"新增$0\"}",
            "            open={open}",
            "            maskClosable={!isPending}",
            "            onOk={() => form.submit()}",
            "            onCancel={onClose}",
            "            okButtonProps={{ loading: isPending }}",
            "            cancelButtonProps={{ loading: isPending }}",
            "            onClose={onClose}",
            "            {...rest}",
            "        >",
            "            <Form<Add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Params> form={form} disabled={isLoading || isPending} onFinish={mutateAsync}>",
            "                <FormItem<Add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Params> name=\"name\" label=\"名称\">",
            "                    <Input allowClear autoComplete=\"off\" />",
            "                </FormItem>",
            "            </Form>",
            "        </Modal>",
            "    )",
            "}",
            "",
            "export default ${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Editor",
            ""
        ]
    },
    "cookieStorage": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "cookiestorage",
        "body": [
            "import { CookieAttributes, createCookieStorage } from \"deepsea-tools\"",
            "",
            "import { CookiePrefix } from \"@/constants\"",
            "",
            "const prefix = CookiePrefix?.trim() ?? \"\"",
            "",
            "const _cookieStorage = createCookieStorage()",
            "",
            "export const cookieStorage = new Proxy(_cookieStorage, {",
            "    get(target, property) {",
            "        const prop = property as keyof typeof target",
            "        if (prop === \"getItem\")",
            "            return function getItem(key: string) {",
            "                key = `\\${prefix}\\${key}`",
            "                return target.getItem(key)",
            "            }",
            "        if (prop === \"setItem\")",
            "            return function setItem(key: string, value: string, options?: CookieAttributes) {",
            "                key = `\\${prefix}\\${key}`",
            "                return target.setItem(key, value)",
            "            }",
            "        if (prop === \"removeItem\")",
            "            return function removeItem(key: string) {",
            "                key = `\\${prefix}\\${key}`",
            "                return target.removeItem(key)",
            "            }",
            "        return target[prop]",
            "    },",
            "})",
            ""
        ]
    },
    "request": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "request",
        "body": [
            "import { getErrorMessage, isPlainObject } from \"deepsea-tools\"",
            "",
            "import { ApiOrigin, ApiPrefix } from \"@/constants\"",
            "",
            "import { cookieStorage } from \"./cookieStorage\"",
            "",
            "export interface ResponseData<T = any> {",
            "    json: T",
            "    blob: Blob",
            "    text: string",
            "    arrayBuffer: ArrayBuffer",
            "    formData: FormData",
            "    stream: Response",
            "}",
            "",
            "export type ResponseType = keyof ResponseData",
            "",
            "export interface RequestOptions<T extends ResponseType = \"json\"> extends Omit<RequestInit, \"body\" | \"method\"> {",
            "    method?: \"GET\" | \"POST\" | \"DELETE\" | \"HEAD\" | \"OPTIONS\" | \"PUT\" | \"PATCH\" | \"CONNECT\" | \"TRACE\" | (string & {})",
            "    /**",
            "     * 响应的数据类型，默认 json",
            "     * @default \"json\"",
            "     */",
            "    type?: T",
            "    base?: string | URL",
            "    body?: BodyInit | Record<string, any> | any[]",
            "    search?: (string | number | boolean)[][] | Record<string, string | number | boolean> | string | URLSearchParams",
            "    hideError?: boolean",
            "}",
            "",
            "export async function request<T extends any = any>(input: string | URL, options?: RequestOptions<\"json\">): Promise<ResponseData<T>[\"json\"]>",
            "export async function request<P extends Exclude<ResponseType, \"json\">>(input: string | URL, options: RequestOptions<P>): Promise<ResponseData[P]>",
            "export async function request<T extends any = any, P extends ResponseType = \"json\">(",
            "    input: string | URL,",
            "    options?: RequestOptions<P>,",
            "): Promise<ResponseData<T>[P]> {",
            "    let { headers, type = \"json\", body, base, search = {}, method, hideError, ...rest } = options ?? {}",
            "",
            "    const url = new URL(input, typeof input === \"string\" ? base || ApiOrigin?.trim() : undefined)",
            "",
            "    if (ApiPrefix) url.pathname = `/\\${ApiPrefix}\\${url.pathname}`",
            "    url.pathname = url.pathname.replace(/\\/{2,}/g, \"/\")",
            "",
            "    if (Array.isArray(search)) search = search.map(item => item.map(i => String(i)))",
            "    if (isPlainObject(search)) search = Object.entries(search).map(([key, value]) => [key, String(value)])",
            "",
            "    search = new URLSearchParams(search as any)",
            "",
            "    if (url.search) url.search = `\\${url.search}&\\${search.toString()}`",
            "    else url.search = search.toString()",
            "",
            "    if (type !== \"json\" && type !== \"blob\" && type !== \"text\" && type !== \"arrayBuffer\" && type !== \"formData\" && type !== \"stream\")",
            "        throw new Error(`Invalid response type: \\${type}`)",
            "",
            "    headers = new Headers(headers)",
            "    const token = cookieStorage.getItem(\"token\")",
            "    if (token) headers.set(\"Authorization\", `Bearer \\${token}`)",
            "",
            "    if (body && (isPlainObject(body) || Array.isArray(body))) {",
            "        headers.set(\"Content-Type\", \"application/json\")",
            "        method ??= \"POST\"",
            "        body = JSON.stringify(body)",
            "    }",
            "",
            "    try {",
            "        const response = await fetch(url, { headers, body, method, ...rest } as RequestInit)",
            "        switch (type) {",
            "            case \"json\":",
            "                const data = await response.json()",
            "                if (!data.success) throw new Error(data.message)",
            "                return data.data",
            "            case \"blob\":",
            "                return (await response.blob()) as any",
            "            case \"text\":",
            "                return (await response.text()) as any",
            "            case \"arrayBuffer\":",
            "                return (await response.arrayBuffer()) as any",
            "            case \"formData\":",
            "                return (await response.formData()) as any",
            "            case \"stream\":",
            "                return response as any",
            "        }",
            "    } catch (error) {",
            "        if (error instanceof TypeError && error.message === \"Failed to fetch\") message.error(\"网络异常，请稍后再试\")",
            "        else if (!hideError) message.error(getErrorMessage(error))",
            "        throw error",
            "    }",
            "}",
            ""
        ]
    },
    "getDataRequest": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "getdatarequest",
        "body": [
            "import { getErrorMessage } from \"deepsea-tools\"",
            "",
            "export interface DataResponse<Data = any> {",
            "    success: boolean",
            "    data?: Data",
            "    /** 消息 */",
            "    message?: string",
            "    /** 状态码 */",
            "    code?: number",
            "}",
            "",
            "export interface ClientErrorOptions extends Pick<DataResponse, \"message\" | \"code\"> {",
            "    /** 原始错误 */",
            "    origin?: unknown",
            "}",
            "",
            "/** 可以暴露给客户端的错误 */",
            "export class ClientError extends Error {",
            "    /** 原始的错误 */",
            "    origin?: unknown",
            "    /** 错误代码 */",
            "    code?: number",
            "",
            "    constructor(messageOrOptions?: string | ClientErrorOptions) {",
            "        if (typeof messageOrOptions === \"string\") {",
            "            super(messageOrOptions)",
            "            return",
            "        }",
            "        const { message, code, origin } = messageOrOptions ?? {}",
            "        super(message)",
            "        this.origin = origin",
            "        this.code = code",
            "    }",
            "}",
            "",
            "export type GetLoaderDataType<Loader extends (...args: any[]) => Promise<DataResponse<any> | undefined | void>> =",
            "    Awaited<ReturnType<Loader>> extends DataResponse<infer T> ? T : undefined",
            "",
            "export interface RequestEventListener<",
            "    Loader extends (...args: any[]) => Promise<DataResponse<any> | undefined | void> = (...args: unknown[]) => Promise<DataResponse<unknown>>,",
            "> {",
            "    success: (data: GetLoaderDataType<Loader>) => void",
            "    error: (error: unknown, args: Parameters<Loader>) => void",
            "    settled: (error: unknown, data: GetLoaderDataType<Loader> | undefined, args: Parameters<Loader>) => void",
            "}",
            "",
            "export type RequestEventListeners<",
            "    Loader extends (...args: any[]) => Promise<DataResponse<any> | undefined | void> = (...args: unknown[]) => Promise<DataResponse<unknown>>,",
            "> = {",
            "    [Event in keyof RequestEventListener<Loader>]: Array<RequestEventListener<Loader>[Event]>",
            "}",
            "",
            "interface DataRequestWithoutPreset<Loader extends (...args: any[]) => Promise<DataResponse<any> | undefined | void>> {",
            "    (...args: Parameters<Loader>): Promise<GetLoaderDataType<Loader>>",
            "    onSuccess(listener: RequestEventListener<Loader>[\"success\"] | undefined): this",
            "    onError(listener: RequestEventListener<Loader>[\"error\"] | undefined): this",
            "    onSettled(listener: RequestEventListener<Loader>[\"settled\"] | undefined): this",
            "}",
            "",
            "export interface DataRequest<Loader extends (...args: any[]) => Promise<DataResponse<any> | undefined | void>> extends DataRequestWithoutPreset<Loader> {",
            "    preset(...args: Parameters<Loader>): DataRequestWithoutPreset<() => ReturnType<Loader>>",
            "}",
            "",
            "const map: RequestEventListeners = {",
            "    success: [],",
            "    error: [],",
            "    settled: [],",
            "}",
            "",
            "export function getRequestEventListeners<Event extends keyof RequestEventListener>(event: Event): Array<RequestEventListener[Event]> {",
            "    return map[event]",
            "}",
            "",
            "export function removeRequestEventListener<Event extends keyof RequestEventListener>(event: Event, listener: RequestEventListener[Event]) {",
            "    map[event] = map[event].filter(item => item !== listener) as any",
            "}",
            "",
            "export function addRequestEventListener<Event extends keyof RequestEventListener>(event: Event, listener: RequestEventListener[Event]) {",
            "    if (!map[event].includes(listener)) map[event].push(listener)",
            "    function removeListener() {",
            "        removeRequestEventListener(event, listener)",
            "    }",
            "    return removeListener",
            "}",
            "",
            "export function getDataRequest<Loader extends (...args: any[]) => Promise<DataResponse<any> | undefined | void>>(loader: Loader): DataRequest<Loader> {",
            "    function _getDataRequest<Loader extends (...args: any[]) => Promise<DataResponse<any> | undefined | void>, PresetArgs = undefined>(",
            "        loader: Loader,",
            "        presetArgs?: PresetArgs,",
            "    ): PresetArgs extends undefined ? DataRequest<Loader> : Omit<DataRequest<() => ReturnType<Loader>>, \"preset\"> {",
            "        let onSuccessListener: RequestEventListener<Loader>[\"success\"] | undefined",
            "        let onErrorListener: RequestEventListener<Loader>[\"error\"] | undefined",
            "        let onSettledListener: RequestEventListener<Loader>[\"settled\"] | undefined",
            "",
            "        async function request(...args: Parameters<Loader>): Promise<GetLoaderDataType<Loader>> {",
            "            try {",
            "                const result = (await loader(...args)) ?? { success: true }",
            "                const { success, data, message } = result",
            "                if (!success) throw new Error(message)",
            "                onSuccessListener?.(data)",
            "                getRequestEventListeners(\"success\").forEach(listener => listener(data))",
            "                onSettledListener?.(undefined, data, (presetArgs ?? args) as any)",
            "                getRequestEventListeners(\"settled\").forEach(listener => listener(undefined, data, (presetArgs ?? args) as any))",
            "                return data",
            "            } catch (error) {",
            "                onErrorListener?.(error, (presetArgs ?? args) as any)",
            "                getRequestEventListeners(\"error\").forEach(listener => listener(error, (presetArgs ?? args) as any))",
            "                onSettledListener?.(error, undefined, (presetArgs ?? args) as any)",
            "                getRequestEventListeners(\"settled\").forEach(listener => listener(error, undefined, (presetArgs ?? args) as any))",
            "                throw error",
            "            }",
            "        }",
            "",
            "        if (loader.name) Object.defineProperty(request, \"name\", { value: loader.name })",
            "",
            "        request.onSuccess = function onSuccess(listener?: RequestEventListener<Loader>[\"success\"]) {",
            "            onSuccessListener = listener",
            "            return request",
            "        }",
            "",
            "        request.onError = function onError(listener: RequestEventListener<Loader>[\"error\"]) {",
            "            onErrorListener = listener",
            "            return request",
            "        }",
            "",
            "        request.onSettled = function onSettled(listener: RequestEventListener<Loader>[\"settled\"]) {",
            "            onSettledListener = listener",
            "            return request",
            "        }",
            "",
            "        if (!presetArgs) {",
            "            request.preset = function preset(...args: Parameters<Loader>) {",
            "                async function request(): Promise<GetLoaderDataType<Loader>> {",
            "                    return (await loader(...args)) as any",
            "                }",
            "",
            "                if (loader.name) Object.defineProperty(request, \"name\", { value: loader.name })",
            "",
            "                return _getDataRequest(request as any, args)",
            "            }",
            "        }",
            "",
            "        return request as any",
            "    }",
            "",
            "    return _getDataRequest(loader)",
            "}",
            "",
            "addRequestEventListener(\"error\", error => (console.error(error), message.error(getErrorMessage(error))))",
            ""
        ]
    },
    "getDataResponse": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "getdataresponse",
        "body": [
            "import { addErrorLog } from \"@/server/addErrorLog\"",
            "import { addOperationLog } from \"@/server/addOperationLog\"",
            "",
            "import { ClientError, DataResponse } from \"./getDataRequest\"",
            "",
            "export async function getDataResponse<T extends (...args: any[]) => Promise<any>>(",
            "    action: T,",
            "    ...args: Parameters<T>",
            "): Promise<DataResponse<Awaited<ReturnType<T>>>> {",
            "    let success = true",
            "    let data: Awaited<ReturnType<T>> | undefined",
            "    let message: string | undefined",
            "    addOperationLog({",
            "        action: action.name,",
            "        args,",
            "    })",
            "    try {",
            "        data = await action(...args)",
            "    } catch (error) {",
            "        addErrorLog({",
            "            error,",
            "            action: action.name,",
            "            args,",
            "        }).catch(console.error)",
            "        if (!(error instanceof ClientError)) throw error",
            "        success = false",
            "        message = error.message",
            "    }",
            "    return { success, data, message }",
            "}",
            ""
        ]
    },
    "server only": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "so",
        "body": [
            "import \"server-only\"",
            ""
        ],
    },
    "shared": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "shared",
        "body": [
            "import { ${TM_FILENAME_BASE/^([a-zA-Z])/${1:/upcase}/}Params } from \"@/schemas/${TM_FILENAME_BASE}\"",
            "",
            "export async function ${TM_FILENAME_BASE}(params: ${TM_FILENAME_BASE/^([a-zA-Z])/${1:/upcase}/}Params) {",
            "    $0",
            "}",
            "",
        ],
    },
    "submit hook": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "submit",
        "body": [
            "const { mutateAsync, isPending } = useMutation({",
            "    mutationFn: (data: Add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Params) =>",
            "        isUpdate ? getDataRequest(update${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Action)(update${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Parser({...data, id})) : getDataRequest(add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Action)(add${TM_FILENAME_BASE/^([a-zA-Z])(.+?)Editor$/${1:/upcase}${2}/}Parser(data)),",
            "    onMutate: () =>",
            "        void message.loading({",
            "            content: `\\${isUpdate ? \"修改\" : \"新增\"}$0中...`,",
            "            key: \"loading\",",
            "        }),",
            "    onSuccess: data => {",
            "        message.success(`\\${isUpdate ? \"修改\" : \"新增\"}$0成功`)",
            "        onSuccess?.(data!)",
            "        onOpenChange?.(false)",
            "    },",
            "    onError: error => {",
            "        message.error(getErrorMessage(error))",
            "        onError?.(error)",
            "    },",
            "    onSettled: () => message.destroy(\"loading\"),",
            "})",
        ],
    },
    "schema": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "schema",
        "body": [
            "import { getParser } from \".\"",
            "import { z } from \"zod\"",
            "",
            "export const ${TM_FILENAME_BASE}Schema = z.string({ message: \"无效的 ${TM_FILENAME_BASE}\" })",
            "",
            "export type ${TM_FILENAME_BASE/^([a-zA-Z])/${1:/upcase}/}Params = z.infer<typeof ${TM_FILENAME_BASE}Schema>",
            "",
            "export const ${TM_FILENAME_BASE}Parser = getParser(${TM_FILENAME_BASE}Schema)",
            ""
        ]
    },
    "useState snippet": {
        "prefix": "state",
        "body": [
            "const [$1, set${1/^([a-z])/${1:/upcase}/}] = useState($2)"
        ],
        "description": "Create useState hook with auto-capitalized setState"
    },
    "getPrismaConfig": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "gpc",
        "body": [
            "import { DefaultArgs } from \"@prisma/client/runtime/library\"",
            "",
            "import { Prisma } from \"./generated/client\"",
            "",
            "export function ${TM_FILENAME_BASE}<",
            "    T extends Prisma.${TM_FILENAME_BASE/^get(.+?)[A-Z][a-z]+$/${1}/}FindManyArgs,",
            "    P extends Prisma.SelectSubset<T, Prisma.${TM_FILENAME_BASE/^get(.+?)[A-Z][a-z]+$/${1}/}FindManyArgs<DefaultArgs>>[\"${TM_FILENAME_BASE/^get(.+?)([A-Z][a-z]+)$/${2:/downcase}/}\"],",
            ">(${TM_FILENAME_BASE/^get(.+?)([A-Z][a-z]+)$/${2:/downcase}/}: P): P {",
            "    return ${TM_FILENAME_BASE/^get(.+?)([A-Z][a-z]+)$/${2:/downcase}/}",
            "}",
            ""
        ]
    },
    "AutoInput": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "autoinput",
        "body": [
            "\"use client\"",
            "",
            "import { ComponentProps, FC, useState } from \"react\"",
            "import { useQuery } from \"@tanstack/react-query\"",
            "import { AutoComplete } from \"antd\"",
            "import { satisfyKeyword } from \"deepsea-tools\"",
            "import { StrictOmit } from \"soda-type\"",
            "",
            "import { getAll${TM_FILENAME_BASE/^([a-zA-Z])(.+)Input$/${1:/upcase}$2/}sAction } from \"@/actions/getAll${TM_FILENAME_BASE/^([a-zA-Z])(.+)Input$/${1:/upcase}$2/}s\"",
            "",
            "import { getDataRequest } from \"@/utils/getDataRequest\"",
            "",
            "export interface ${TM_FILENAME_BASE/^([a-zA-Z])(.+)Input$/${1:/upcase}$2/}InputProps extends StrictOmit<ComponentProps<typeof AutoComplete<NonNullable<Awaited<ReturnType<typeof getAll${TM_FILENAME_BASE/^([a-zA-Z])(.+)Select$/${1:/upcase}$2/}sAction>>[\"data\"]>[number]>>, \"options\" | \"onSearch\"> {}",
            "",
            "const ${TM_FILENAME_BASE/^([a-zA-Z])(.+)Input$/${1:/upcase}$2/}Input: FC<${TM_FILENAME_BASE/^([a-zA-Z])(.+)Input$/${1:/upcase}$2/}InputProps> = props => {",
            "    const { data } = useQuery({",
            "        queryKey: [\"get-all${TM_FILENAME_BASE/(Input)|([A-Z])/${2:+-}${2:/downcase}/g}s\"],",
            "        queryFn: getDataRequest(getAll${TM_FILENAME_BASE/^([a-zA-Z])(.+)Input$/${1:/upcase}$2/}sAction).preset(),",
            "        staleTime: Infinity,",
            "        gcTime: Infinity,",
            "    })",
            "    const [keyword, setKeyword] = useState(\"\")",
            "",
            "    return <AutoComplete options={data?.filter(item => satisfyKeyword(item, keyword)).map(value => ({ value }))} onSearch={setKeyword} allowClear {...props} />",
            "}",
            "",
            "export default ${TM_FILENAME_BASE/^([a-zA-Z])(.+)Input$/${1:/upcase}$2/}Input",
            ""
        ]
    },
    "AutoSelect": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "autoselect",
        "body": [
            "\"use client\"",
            "",
            "import { FC } from \"react\"",
            "import { useQuery } from \"@tanstack/react-query\"",
            "import { NiceSearch, NiceSearchProps } from \"soda-antd\"",
            "",
            "import { getAll${TM_FILENAME_BASE/^([a-zA-Z])(.+)Select$/${1:/upcase}$2/}sAction } from \"@/actions/getAll${TM_FILENAME_BASE/^([a-zA-Z])(.+)Select$/${1:/upcase}$2/}s\"",
            "",
            "import { getDataRequest } from \"@/utils/getDataRequest\"",
            "",
            "export interface ${TM_FILENAME_BASE/^([a-zA-Z])(.+)Select$/${1:/upcase}$2/}SelectProps extends Omit<NiceSearchProps<NonNullable<Awaited<ReturnType<typeof getAll${TM_FILENAME_BASE/^([a-zA-Z])(.+)Select$/${1:/upcase}$2/}sAction>>[\"data\"]>[number]>, \"data\" | \"labelField\" | \"valueField\"> {}",
            "",
            "const ${TM_FILENAME_BASE/^([a-zA-Z])(.+)Select$/${1:/upcase}$2/}Select: FC<${TM_FILENAME_BASE/^([a-zA-Z])(.+)Select$/${1:/upcase}$2/}SelectProps> = props => {",
            "    const { data } = useQuery({",
            "        queryKey: [\"get-all${TM_FILENAME_BASE/(Select)|([A-Z])/${2:+-}${2:/downcase}/g}s\"],",
            "        queryFn: getDataRequest(getAll${TM_FILENAME_BASE/^([a-zA-Z])(.+)Select$/${1:/upcase}$2/}sAction).preset(),",
            "        staleTime: Infinity,",
            "        gcTime: Infinity,",
            "    })",
            "",
            "    return <NiceSearch data={data} labelField={item => item} valueField={item => item} {...props} />",
            "}",
            "",
            "export default ${TM_FILENAME_BASE/^([a-zA-Z])(.+)Select$/${1:/upcase}$2/}Select",
            ""
        ]
    },
    "EnumSelect": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "enumselect",
        "body": [
            "\"use client\"",
            "",
            "import { ComponentProps, FC } from \"react\"",
            "import { Select } from \"antd\"",
            "import { getEnumOptions } from \"deepsea-tools\"",
            "import { StrictOmit } from \"soda-type\"",
            "",
            "import { ${TM_FILENAME_BASE/^([a-zA-Z])(.+)Select$/${1:/upcase}$2/} } from \"@/constant\"",
            "",
            "export interface ${TM_FILENAME_BASE/^([a-zA-Z])(.+)Select$/${1:/upcase}$2/}SelectProps extends StrictOmit<ComponentProps<typeof Select<${TM_FILENAME_BASE/^([a-zA-Z])(.+)Select$/${1:/upcase}$2/}>>, \"options\"> {}",
            "",
            "const ${TM_FILENAME_BASE/^([a-zA-Z])(.+)Select$/${1:/upcase}$2/}Select: FC<${TM_FILENAME_BASE/^([a-zA-Z])(.+)Select$/${1:/upcase}$2/}SelectProps> = props => <Select options={getEnumOptions(${TM_FILENAME_BASE/^([a-zA-Z])(.+)Select$/${1:/upcase}$2/})} {...props} />",
            "",
            "export default ${TM_FILENAME_BASE/^([a-zA-Z])(.+)Select$/${1:/upcase}$2/}Select",
            ""
        ]
    },
    "getIp": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "getip",
        "body": [
            "import { headers } from \"next/headers\"",
            "",
            "export async function getIp() {",
            "    const headers2 = headers()",
            "    return headers2.get(\"x-forwarded-for\")!",
            "}",
            ""
        ]
    },
    "getUserAgent": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "getuseragent",
        "body": [
            "import { headers } from \"next/headers\"",
            "",
            "export async function getUserAgent() {",
            "    const headers2 = headers()",
            "    return headers2.get(\"user-agent\")!",
            "}",
            ""
        ]
    },
    "addErrorLog": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "adderrorlog",
        "body": [
            "import \"server-only\"",
            "",
            "import { prisma } from \"@/prisma\"",
            "",
            "import { ClientError } from \"@/utils/getDataRequest\"",
            "import { stringifyParams } from \"@/utils/stringifyParams\"",
            "",
            "import { getIp } from \"./getIp\"",
            "import { getUserAgent } from \"./getUserAgent\"",
            "import { getUserInfoOrNullFromCookies } from \"./getUserInfoOrNullFromCookies\"",
            "",
            "function getConstructorName(obj: unknown): string {",
            "    if (obj === undefined || obj === null) return \"unknown\"",
            "    return obj.constructor.name",
            "}",
            "",
            "function getStringProperty(obj: unknown, key: string): string | undefined {",
            "    return ((obj ?? {}) as any)[key]",
            "}",
            "",
            "export interface AddErrorLogParams {",
            "    error: unknown",
            "    action?: string",
            "    args?: unknown",
            "}",
            "",
            "export async function addErrorLog({ error, action, args }: AddErrorLogParams) {",
            "    try {",
            "        const user = await getUserInfoOrNullFromCookies()",
            "        const params = stringifyParams(args)",
            "        await prisma.\\$transaction([",
            "            prisma.errorLog.create({",
            "                data: {",
            "                    userId: user?.id,",
            "                    userName: user?.name,",
            "                    type: getConstructorName(error),",
            "                    message: getStringProperty(error, \"message\") ?? String(error),",
            "                    stack: getStringProperty(error, \"stack\"),",
            "                    action,",
            "                    params,",
            "                    ip: await getIp(),",
            "                    userAgent: await getUserAgent(),",
            "                },",
            "            }),",
            "        ])",
            "        if (error instanceof ClientError && error.origin) {",
            "            await addErrorLog({",
            "                error: error.origin,",
            "                action,",
            "                args,",
            "            })",
            "        }",
            "    } catch (error) {",
            "        console.error(error)",
            "    }",
            "}",
            ""
        ]
    },
    "addOperationLog": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "addoperationlog",
        "body": [
            "import \"server-only\"",
            "",
            "import { prisma } from \"@/prisma\"",
            "",
            "import { stringifyParams } from \"@/utils/stringifyParams\"",
            "",
            "import { getIp } from \"./getIp\"",
            "import { getUserAgent } from \"./getUserAgent\"",
            "import { getUserInfoOrNullFromCookies } from \"./getUserInfoOrNullFromCookies\"",
            "",
            "export interface AddOperationLogParams {",
            "    action?: string",
            "    args?: unknown",
            "}",
            "",
            "export async function addOperationLog({ action, args }: AddOperationLogParams) {",
            "    try {",
            "        const user = await getUserInfoOrNullFromCookies()",
            "        const params = stringifyParams(args)",
            "        await prisma.\\$transaction([",
            "            prisma.operationLog.create({",
            "                data: {",
            "                    userId: user?.id,",
            "                    userName: user?.name,",
            "                    action,",
            "                    params,",
            "                    ip: await getIp(),",
            "                    userAgent: await getUserAgent(),",
            "                },",
            "            }),",
            "        ])",
            "    } catch (error) {",
            "        console.error(error)",
            "    }",
            "}",
            ""
        ]
    },
    "stringifyParams": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "stringifyparams",
        "body": [
            "export function stringifyParams(params: unknown): string | undefined {",
            "    let result: string | undefined",
            "    try {",
            "        if (Array.isArray(params) && params.length === 1) result = JSON.stringify(params[0])",
            "        else result = JSON.stringify(params)",
            "    } catch (error) {}",
            "    return result",
            "}",
            ""
        ]
    },
    "getParser": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "getparser",
        "body": [
            "import { ZodType, z } from \"zod\"",
            "",
            "import { ClientError } from \"@/utils/getDataRequest\"",
            "",
            "export function getParser<T extends ZodType<any, any, any>>(schema: T) {",
            "    return function parser(arg: unknown): z.infer<T> {",
            "        const { data, error } = schema.safeParse(arg)",
            "        if (error)",
            "            throw new ClientError({",
            "                message: error.errors.map(e => e.message).join(\", \"),",
            "                origin: error,",
            "            })",
            "        return data",
            "    }",
            "}",
            ""
        ]
    },
    "operation": {
        "scope": "prisma",
        "prefix": "operation",
        "body": [
            "model OperationLog {",
            "    id        Int      @id @default(autoincrement()) // 主键ID",
            "    createdAt DateTime @default(now()) // 创建时间",
            "    action    String? // 请求动作",
            "    params    String? // 请求参数",
            "    ip        String? // IP地址",
            "    userAgent String? // User Agent",
            "}",
            "",
            "model ErrorLog {",
            "    id        Int      @id @default(autoincrement()) // 主键ID",
            "    createdAt DateTime @default(now()) // 创建时间",
            "    type      String // 错误类型",
            "    message   String // 错误消息",
            "    stack     String? // 堆栈信息",
            "    action    String? // 请求动作",
            "    params    String? // 请求参数",
            "    ip        String? // IP地址",
            "    userAgent String? // User Agent",
            "}",
            ""
        ]
    },
    "do not export to action": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "ne",
        "body": "\"no export\""
    },
    "createServerFn": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "csf",
        "body": [
            "import { createServerFn } from \"@tanstack/react-start\"",
            "",
            "export const ${TM_FILENAME_BASE} = createServerFn()",
            "    .validator((v: unknown) => v)",
            "    .handler(async ctx => {",
            "        $0",
            "    })"
        ]
    },
    "console.dir": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "dir",
        "body": "console.dir(${1:data}, { depth: null })"
    },
    "onSubmit": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "onSubmit",
        "body": [
            "function onSubmit(event: FormEvent<HTMLFormElement>) {",
            "    event.preventDefault()",
            "    form.handleSubmit()",
            "}"
        ]
    },
    "Code in JavaScript": {
        "scope": "markdown",
        "prefix": "cj",
        "body": [
            "```javascript",
            "$0",
            "```"
        ],
        "description": "Code in JavaScript"
    },
    "Code in Html": {
        "scope": "markdown",
        "prefix": "ch",
        "body": [
            "```html",
            "$0",
            "```"
        ],
        "description": "Code in Html"
    },
    "Code in MySQL": {
        "scope": "markdown",
        "prefix": "cm",
        "body": [
            "```mysql",
            "$0",
            "```"
        ],
        "description": "Code in MySQL"
    },
    "code in JSX": {
        "scope": "markdown",
        "prefix": "cjsx",
        "body": [
            "```jsx",
            "$0",
            "```"
        ],
        "description": "Code in JSX"
    },
    "Code in TypeScript": {
        "scope": "markdown",
        "prefix": "cts",
        "body": [
            "```typescript",
            "$0",
            "```"
        ],
        "description": "Code in TypeScript"
    },
    "Code in Json": {
        "scope": "markdown",
        "prefix": "cjson",
        "body": [
            "```json",
            "$0",
            "```"
        ],
        "description": "Code in JSON"
    },
    "tj": {
        "scope": "markdown",
        "prefix": "tj",
        "body": [
            "在 `$0` 中添加如下内容："
        ],
        "description": "添加内容"
    },
    "cg": {
        "scope": "markdown",
        "prefix": "cg",
        "body": [
            "```git",
            "$0",
            "```"
        ],
        "description": "Code in Git"
    },
    "code in TSX": {
        "scope": "markdown",
        "prefix": "ctsx",
        "body": [
            "```tsx",
            "$0",
            "```"
        ],
        "description": "Code in TSX"
    },
    "code in Shell": {
        "scope": "markdown",
        "prefix": "cshell",
        "body": [
            "```shell",
            "$0",
            "```"
        ],
        "description": "Code in Shell"
    },
    "code in PowerShell": {
        "scope": "markdown",
        "prefix": "cp",
        "body": [
            "```powershell",
            "$0",
            "```"
        ],
        "description": "Code in PowerShell"
    },
    "code in vue": {
        "scope": "markdown",
        "prefix": "cv",
        "body": [
            "```vue",
            "$0",
            "```"
        ],
        "description": "Code in Vue"
    },
    "code in Java": {
        "scope": "markdown",
        "prefix": "cjava",
        "body": [
            "```java",
            "$0",
            "```"
        ],
        "description": "Code in Java"
    },
    "react router page route": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "rrr",
        "body": [
            "import { FC } from \"react\"",
            "",
            "import { Route } from \"@/route-types/${TM_FILENAME_BASE}\"",
            "",
            "export async function loader({ request, params, context }: Route.LoaderArgs) {",
            "",
            "}",
            "",
            "export async function action({ request, params, context }: Route.ActionArgs) {",
            "",
            "}",
            "",
            "const Page: FC<Route.ComponentProps> = ({ loaderData }) => {",
            "    return <div></div>",
            "}",
            "",
            "export default Page",
            ""
        ]
    },
    "api router": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "ar",
        "body": [
            "import { ${TM_FILENAME_BASE/^api\\.([^-]+)$|^api\\.([^-]+)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)$/$1$2${3:/upcase}$4$5${6:/upcase}$7${8:/upcase}$9$10${11:/upcase}$12${13:/upcase}$14${15:/upcase}$16$17${18:/upcase}$19${20:/upcase}$21${22:/upcase}$23${24:/upcase}$25$26${27:/upcase}$28${29:/upcase}$30${31:/upcase}$32${33:/upcase}$34${35:/upcase}$36/}Schema } from \"@/schema/${TM_FILENAME_BASE/^api\\.([^-]+)$|^api\\.([^-]+)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)$/$1$2${3:/upcase}$4$5${6:/upcase}$7${8:/upcase}$9$10${11:/upcase}$12${13:/upcase}$14${15:/upcase}$16$17${18:/upcase}$19${20:/upcase}$21${22:/upcase}$23${24:/upcase}$25$26${27:/upcase}$28${29:/upcase}$30${31:/upcase}$32${33:/upcase}$34${35:/upcase}$36/}\"",
            "",
            "import { ${TM_FILENAME_BASE/^api\\.([^-]+)$|^api\\.([^-]+)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)$/$1$2${3:/upcase}$4$5${6:/upcase}$7${8:/upcase}$9$10${11:/upcase}$12${13:/upcase}$14${15:/upcase}$16$17${18:/upcase}$19${20:/upcase}$21${22:/upcase}$23${24:/upcase}$25$26${27:/upcase}$28${29:/upcase}$30${31:/upcase}$32${33:/upcase}$34${35:/upcase}$36/} } from \"@/server/${TM_FILENAME_BASE/^api\\.([^-]+)$|^api\\.([^-]+)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)$/$1$2${3:/upcase}$4$5${6:/upcase}$7${8:/upcase}$9$10${11:/upcase}$12${13:/upcase}$14${15:/upcase}$16$17${18:/upcase}$19${20:/upcase}$21${22:/upcase}$23${24:/upcase}$25$26${27:/upcase}$28${29:/upcase}$30${31:/upcase}$32${33:/upcase}$34${35:/upcase}$36/}\"",
            "",
            "import { Route } from \"@/route-types/${TM_FILENAME_BASE}\"",
            "",
            "export async function action({ request }: Route.ActionArgs) {",
            "    const json = await request.json()",
            "    const input = ${TM_FILENAME_BASE/^api\\.([^-]+)$|^api\\.([^-]+)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)$/$1$2${3:/upcase}$4$5${6:/upcase}$7${8:/upcase}$9$10${11:/upcase}$12${13:/upcase}$14${15:/upcase}$16$17${18:/upcase}$19${20:/upcase}$21${22:/upcase}$23${24:/upcase}$25$26${27:/upcase}$28${29:/upcase}$30${31:/upcase}$32${33:/upcase}$34${35:/upcase}$36/}Schema.parse(json)",
            "    const output = await ${TM_FILENAME_BASE/^api\\.([^-]+)$|^api\\.([^-]+)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)$|^api\\.([^-]+)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)-([^-])([^-]*)$/$1$2${3:/upcase}$4$5${6:/upcase}$7${8:/upcase}$9$10${11:/upcase}$12${13:/upcase}$14${15:/upcase}$16$17${18:/upcase}$19${20:/upcase}$21${22:/upcase}$23${24:/upcase}$25$26${27:/upcase}$28${29:/upcase}$30${31:/upcase}$32${33:/upcase}$34${35:/upcase}$36/}(input)",
            "    return output",
            "}",
            ""
        ]
    },
    "send Aliyun Sms": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "aliyunsms",
        "body": [
            "import Credential from \"@alicloud/credentials\"",
            "import Dysmsapi, { SendSmsRequest } from \"@alicloud/dysmsapi20170525\"",
            "import { Config } from \"@alicloud/openapi-client\"",
            "import { RuntimeOptions } from \"@alicloud/tea-util\"",
            "",
            "export interface SendAliyunSmsParams {",
            "    phone: string | string[]",
            "    signName: string",
            "    templateCode: string",
            "    params: Record<string, string>",
            "}",
            "",
            "const phoneReg = /^1[3-9]\\d{9}\\$/",
            "",
            "export async function sendAliyunSms({ phone, signName, templateCode, params }: SendAliyunSmsParams) {",
            "    phone = Array.isArray(phone) ? phone : [phone]",
            "    if (phone.length === 0) throw new Error(\"phone is required\")",
            "    const invalidPhones = phone.filter(p => !phoneReg.test(p))",
            "    if (invalidPhones.length > 0) throw new Error(`invalid phone\\${invalidPhones.length > 1 ? \"s\" : \"\"}: \\${invalidPhones.join(\",\")}`)",
            "    phone = phone.join(\",\")",
            "    const credential = new Credential()",
            "    const config = new Config({ credential })",
            "    config.accessKeyId = process.env.ALIYUN_ACCESS_KEY_ID",
            "    config.accessKeySecret = process.env.ALIYUN_ACCESS_KEY_SECRET",
            "    config.endpoint = `dysmsapi.aliyuncs.com`",
            "    const client = new Dysmsapi(config)",
            "    const sendSmsRequest = new SendSmsRequest({",
            "        phoneNumbers: phone,",
            "        signName,",
            "        templateCode,",
            "        templateParam: JSON.stringify(params),",
            "    })",
            "    const response = await client.sendSmsWithOptions(sendSmsRequest, new RuntimeOptions({}))",
            "    if (response.body?.code !== \"OK\") throw new Error(response.body?.message)",
            "    return response",
            "}",
            ""
        ]
    }
}